diff --git a/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx b/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
index 9002bea..d692a87 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
@@ -147,6 +147,7 @@ import { NotificationColor } from "../../stores/notifications/NotificationColor"
 import { UserTab } from "../views/dialogs/UserTab";
 import { shouldSkipSetupEncryption } from "../../utils/crypto/shouldSkipSetupEncryption";
 import { Filter } from "../views/dialogs/spotlight/Filter";
+import TchapUrls from "../../../../../src/tchap/util/TchapUrls";
 
 // legacy export
 export { default as Views } from "../../Views";
@@ -1755,6 +1756,15 @@ export default class MatrixChat extends React.PureComponent<IProps, IState> {
             return;
         }
 
+        //:tchap: add a screen to open user tab security
+        if (screen === TchapUrls.secureBackupFragment) {
+            //open the security tab
+            //there is no anchor to sauvegarde-automatique subection
+            const payload: OpenToTabPayload = { action: Action.ViewUserSettings, initialTabId: UserTab.Security };
+            dis.dispatch(payload);
+        } else
+        //:tchap: end
+
         if (screen === "register") {
             dis.dispatch({
                 action: "start_registration",
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
index 217f4a4..acea5fe 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
@@ -230,14 +230,21 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
             userSigningPrivateKeyCached;
 
         const actions: JSX.Element[] = [];
+        // :TCHAP move Reset button to advanced section
+        const advancedActions: JSX.Element[] = [];
+        // end :TCHAP:
 
         // TODO: determine how better to expose this to users in addition to prompts at login/toast
         if (!keysExistEverywhere && homeserverSupportsCrossSigning) {
-            let buttonCaption = _t("Set up Secure Backup");
+            // :TCHAP: change > let buttonCaption = _t("Set up Secure Backup");
+            let buttonCaption = _t("Activate on this device");
+            // end :TCHAP:
+            
             if (crossSigningPrivateKeysInStorage) {
                 buttonCaption = _t("Verify this session");
             }
-            actions.push(
+            // TCHAP: change actions.push(
+            advancedActions.push(
                 <AccessibleButton key="setup" kind="primary" onClick={this.onBootstrapClick}>
                     {buttonCaption}
                 </AccessibleButton>,
@@ -245,7 +252,9 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
         }
 
         if (keysExistAnywhere) {
-            actions.push(
+            // :TCHAP actions.push(
+            advancedActions.push(
+            // end :TCHAP:
                 <AccessibleButton key="reset" kind="danger" onClick={this.resetCrossSigning}>
                     {_t("Reset")}
                 </AccessibleButton>,
@@ -257,6 +266,12 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
             actionRow = <div className="mx_CrossSigningPanel_buttonRow">{actions}</div>;
         }
 
+        // :TCHAP add
+        let advancedActionRow;
+        if (advancedActions.length) {
+            advancedActionRow = <div className="mx_CrossSigningPanel_buttonRow">{advancedActions}</div>;
+        }
+        // end :TCHAP:
         return (
             <>
                 {summarisedStatus}
@@ -292,6 +307,7 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
                             <td>{homeserverSupportsCrossSigning ? _t("exists") : _t("not found")}</td>
                         </tr>
                     </table>
+                    {advancedActionRow}
                 </details>
                 {errorSection}
                 {actionRow}
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
index 2f866aa..5dccb31 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
@@ -257,6 +257,16 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
             } else {
                 statusDescription = (
                     <>
+                        {/* TCHAP add Tchap text */}
+                        <SettingsSubsectionText>
+                            {_t(
+                                "Your keys are <b>not being backed up from this session</b>.",
+                                {},
+                                { b: (sub) => <b>{sub}</b> },
+                            )}
+                        </SettingsSubsectionText>
+                        {/* end TCHAP */}
+                        {/* :TCHAP remove element text
                         <SettingsSubsectionText>
                             {_t(
                                 "This session is <b>not backing up your keys</b>, " +
@@ -272,6 +282,7 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
                                     "losing any keys that may only be on this session.",
                             )}
                         </SettingsSubsectionText>
+                        end TCHAP */}
                     </>
                 );
                 restoreButtonCaption = _t("Connect this session to Key Backup");
@@ -326,13 +337,15 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
                 </AccessibleButton>,
             );
 
-            if (!isSecureBackupRequired(MatrixClientPeg.safeGet())) {
-                actions.push(
-                    <AccessibleButton key="delete" kind="danger" onClick={this.deleteBackup}>
-                        {_t("Delete Backup")}
-                    </AccessibleButton>,
-                );
-            }
+            // :TCHAP: hide
+            // if (!isSecureBackupRequired(MatrixClientPeg.safeGet())) {
+            //     actions.push(
+            //         <AccessibleButton key="delete" kind="danger" onClick={this.deleteBackup}>
+            //             {_t("Delete Backup")}
+            //         </AccessibleButton>,
+            //     );
+            // }
+            // end :TCHAP:
         } else {
             statusDescription = (
                 <>
@@ -343,9 +356,11 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
                             { b: (sub) => <b>{sub}</b> },
                         )}
                     </SettingsSubsectionText>
+                    {/* :TCHAP: remove
                     <SettingsSubsectionText>
                         {_t("Back up your keys before signing out to avoid losing them.")}
                     </SettingsSubsectionText>
+                    end TCHAP */ }
                 </>
             );
             actions.push(
@@ -358,7 +373,9 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
         if (secretStorageKeyInAccount) {
             actions.push(
                 <AccessibleButton key="reset" kind="danger" onClick={this.resetSecretStorage}>
-                    {_t("Reset")}
+                    {/* :TCHAP: change {_t("Reset")} into */}
+                    {_t("Generate a new code")}
+                    {/* end :TCHAP */}
                 </AccessibleButton>,
             );
         }
