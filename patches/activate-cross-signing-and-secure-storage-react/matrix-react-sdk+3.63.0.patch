diff --git a/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx b/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
index 97d623a..2a02d90 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
@@ -32,6 +32,8 @@ import { throttle } from "lodash";
 import { CryptoEvent } from "matrix-js-sdk/src/crypto";
 import { RoomType } from "matrix-js-sdk/src/@types/event";
 import { DecryptionError } from "matrix-js-sdk/src/crypto/algorithms";
+//:tchap: import incoming key request handler from tchap project
+import KeyRequestHandler from '../../../../../src/lib/IncomingKeyRequestHandler';
 
 // focus-visible is a Polyfill for the :focus-visible CSS pseudo-attribute used by various components
 import "focus-visible";
@@ -138,6 +140,7 @@ import { VoiceBroadcastResumer } from "../../voice-broadcast";
 import GenericToast from "../views/toasts/GenericToast";
 import { Linkify } from "../views/elements/Linkify";
 import RovingSpotlightDialog, { Filter } from "../views/dialogs/spotlight/SpotlightDialog";
+import TchapUIFeature from "../../../../../src/util/TchapUIFeature";
 
 // legacy export
 export { default as Views } from "../../Views";
@@ -1580,6 +1583,23 @@ export default class MatrixChat extends React.PureComponent<IProps, IState> {
         cli.on(HttpApiEvent.SessionLoggedOut, () => dft.stop());
         cli.on(MatrixEventEvent.Decrypted, (e, err) => dft.eventDecrypted(e, err as DecryptionError));
 
+        //:tchap: add listener to handle incomingKeyRequest and trigger legacy verification process
+        //the one with the emoji
+        //this listener can be forced with forceLegacyIncomingRoomKeyVerification
+        //or is added only if the xs is not active
+        if(TchapUIFeature.forceLegacyIncomingRoomKeyVerification || 
+            !TchapUIFeature.isCrossSigningAndSecureStorageActive()){
+            const krh = new KeyRequestHandler(cli);
+            cli.on(CryptoEvent.RoomKeyRequest, (req) => {
+                krh.handleKeyRequest(req);
+            });
+    
+             cli.on(CryptoEvent.RoomKeyRequestCancellation, (req) => {
+                krh.handleKeyRequestCancellation(req);
+            });
+        }
+        //:tchap: end of tchap
+        
         cli.on(ClientEvent.Room, (room) => {
             if (MatrixClientPeg.get().isCryptoEnabled()) {
                 const blacklistEnabled = SettingsStore.getValueAt(
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
index b04714e..8adbba3 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
@@ -28,6 +28,7 @@ import ConfirmDestroyCrossSigningDialog from "../dialogs/security/ConfirmDestroy
 import SetupEncryptionDialog from "../dialogs/security/SetupEncryptionDialog";
 import { accessSecretStorage } from "../../../SecurityManager";
 import AccessibleButton from "../elements/AccessibleButton";
+import TchapUIFeature from "../../../../../../src/util/TchapUIFeature"; // :TCHAP:
 
 interface IState {
     error?: Error;
@@ -237,6 +238,12 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
             actionRow = <div className="mx_CrossSigningPanel_buttonRow">{actions}</div>;
         }
 
+        // :TCHAP: hide cross-signing actions if cross-signing is not supported
+        if (!TchapUIFeature.isCrossSigningAndSecureStorageActive()) {
+            actionRow = null;
+        }
+        // end :TCHAP:
+
         return (
             <div>
                 {summarisedStatus}
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx
index 56fdb5e..d67fb6d 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx
@@ -27,6 +27,7 @@ import Spinner from "../elements/Spinner";
 import AccessibleButton from "../elements/AccessibleButton";
 import { deleteDevicesWithInteractiveAuth } from "./devices/deleteDevices";
 import MatrixClientContext from "../../../contexts/MatrixClientContext";
+import TchapUtils from '../../../../../../src/util/TchapUtils';
 
 interface IProps {
     className?: string;
@@ -38,6 +39,7 @@ interface IState {
     deviceLoadError?: string;
     selectedDevices: string[];
     deleting?: boolean;
+    isCrossSigningSupported?: boolean;//:tchap: add a state to detect if crossSigning is supported
 }
 
 export default class DevicesPanel extends React.Component<IProps, IState> {
@@ -55,6 +57,12 @@ export default class DevicesPanel extends React.Component<IProps, IState> {
     }
 
     public componentDidMount(): void {
+        //:tchap: Detect cross signing support once
+        TchapUtils.isCrossSigningSupportedByServer().then((isCrossSigningSupported)=>{
+            this.setState({isCrossSigningSupported: isCrossSigningSupported})
+        });
+        //:end of tchap
+
         this.context.on(CryptoEvent.DevicesUpdated, this.onDevicesUpdated);
         this.loadDevices();
     }
@@ -125,6 +133,12 @@ export default class DevicesPanel extends React.Component<IProps, IState> {
     private isDeviceVerified(device: IMyDevice): boolean | null {
         try {
             const cli = this.context;
+            //:tchap: if cross signing is not supported, use the legacy device check
+            if (!this.state.isCrossSigningSupported) {
+                return cli.checkDeviceTrust(cli.getUserId(), device.device_id).isVerified();
+            }
+            //:tchap: end
+
             const deviceInfo = cli.getStoredDevice(cli.getUserId(), device.device_id);
             return this.state.crossSigningInfo
                 .checkDeviceTrust(this.state.crossSigningInfo, deviceInfo, false, true)
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
index 2e6e6fb..f718552 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
@@ -30,6 +30,7 @@ import AccessibleButton from "../elements/AccessibleButton";
 import QuestionDialog from "../dialogs/QuestionDialog";
 import RestoreKeyBackupDialog from "../dialogs/security/RestoreKeyBackupDialog";
 import { accessSecretStorage } from "../../../SecurityManager";
+import TchapUIFeature from "../../../../../../src/util/TchapUIFeature"; // :TCHAP:
 
 interface IState {
     loading: boolean;
@@ -460,17 +461,24 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
         let actionRow;
         if (actions.length) {
             actionRow = <div className="mx_SecureBackupPanel_buttonRow">{actions}</div>;
+            // :TCHAP: hide action buttons if secure storage is not supported
+            // actionRow = <div className="mx_SecureBackupPanel_buttonRow">{actions}</div>;
+            if (!TchapUIFeature.isCrossSigningAndSecureStorageActive()) {
+                actionRow = null;
+            }
+            // end :TCHAP:
         }
 
         return (
             <div>
-                <p>
+                 <p>
                     {_t(
                         "Back up your encryption keys with your account data in case you " +
                             "lose access to your sessions. Your keys will be secured with a " +
                             "unique Security Key.",
                     )}
                 </p>
+                
                 {statusDescription}
                 <details>
                     <summary>{_t("Advanced")}</summary>
