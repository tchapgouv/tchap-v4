diff --git a/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx b/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
index 00a05b1..2009120 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
@@ -32,6 +32,8 @@ import { throttle } from "lodash";
 import { CryptoEvent } from "matrix-js-sdk/src/crypto";
 import { RoomType } from "matrix-js-sdk/src/@types/event";
 import { DecryptionError } from "matrix-js-sdk/src/crypto/algorithms";
+//:tchap: import incoming key request handler from tchap project
+import KeyRequestHandler from '../../../../../src/lib/IncomingKeyRequestHandler';
 
 // focus-visible is a Polyfill for the :focus-visible CSS pseudo-attribute used by various components
 import "focus-visible";
@@ -143,6 +145,7 @@ import { findDMForUser } from "../../utils/dm/findDMForUser";
 import { Linkify } from "../../HtmlUtils";
 import { NotificationColor } from "../../stores/notifications/NotificationColor";
 import { UserTab } from "../views/dialogs/UserTab";
+import TchapUIFeature from "../../../../../src/util/TchapUIFeature";
 
 // legacy export
 export { default as Views } from "../../Views";
@@ -1581,6 +1584,23 @@ export default class MatrixChat extends React.PureComponent<IProps, IState> {
         cli.on(HttpApiEvent.SessionLoggedOut, () => dft.stop());
         cli.on(MatrixEventEvent.Decrypted, (e, err) => dft.eventDecrypted(e, err as DecryptionError));
 
+        //:tchap: add listener to handle incomingKeyRequest and trigger legacy verification process
+        //the one with the emoji
+        //this listener can be forced with forceLegacyIncomingRoomKeyVerification
+        //or is added only if the xs is not active
+        if(TchapUIFeature.forceLegacyIncomingRoomKeyVerification || 
+            !TchapUIFeature.isCrossSigningAndSecureStorageActive()){
+            const krh = new KeyRequestHandler(cli);
+            cli.on(CryptoEvent.RoomKeyRequest, (req) => {
+                krh.handleKeyRequest(req);
+            });
+    
+             cli.on(CryptoEvent.RoomKeyRequestCancellation, (req) => {
+                krh.handleKeyRequestCancellation(req);
+            });
+        }
+        //:tchap: end of tchap
+        
         cli.on(ClientEvent.Room, (room) => {
             if (MatrixClientPeg.get().isCryptoEnabled()) {
                 const blacklistEnabled = SettingsStore.getValueAt(
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
index 0ba8f58..a5ab881 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
@@ -28,6 +28,7 @@ import ConfirmDestroyCrossSigningDialog from "../dialogs/security/ConfirmDestroy
 import SetupEncryptionDialog from "../dialogs/security/SetupEncryptionDialog";
 import { accessSecretStorage } from "../../../SecurityManager";
 import AccessibleButton from "../elements/AccessibleButton";
+import TchapUIFeature from "../../../../../../src/util/TchapUIFeature"; // :TCHAP:
 
 interface IState {
     error?: Error;
@@ -210,6 +211,9 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
             userSigningPrivateKeyCached;
 
         const actions: JSX.Element[] = [];
+        // :TCHAP move Reset button to advanced section
+        const advancedActions: JSX.Element[] = [];
+        // end :TCHAP:
 
         // TODO: determine how better to expose this to users in addition to prompts at login/toast
         if (!keysExistEverywhere && homeserverSupportsCrossSigning) {
@@ -225,9 +229,12 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
         }
 
         if (keysExistAnywhere) {
-            actions.push(
+            // :TCHAP actions.push(
+            advancedActions.push(
+            // end :TCHAP:
                 <AccessibleButton key="reset" kind="danger" onClick={this.resetCrossSigning}>
-                    {_t("Reset")}
+                    {/* :TCHAP: change label {_t("Reset")} */}
+                    {_t("Generate a new password. Note that your locked messages will remain locked.")}
                 </AccessibleButton>,
             );
         }
@@ -237,6 +244,19 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
             actionRow = <div className="mx_CrossSigningPanel_buttonRow">{actions}</div>;
         }
 
+        // :TCHAP add
+        let advancedActionRow;
+        if (advancedActions.length) {
+            advancedActionRow = <div className="mx_CrossSigningPanel_buttonRow">{advancedActions}</div>;
+        }
+        // end :TCHAP:
+
+        // :TCHAP: hide cross-signing actions if cross-signing is not supported
+        if (!TchapUIFeature.isCrossSigningAndSecureStorageActive()) {
+            actionRow = null;
+        }
+        // end :TCHAP:
+
         return (
             <div>
                 {summarisedStatus}
@@ -274,6 +294,7 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
                             </tr>
                         </tbody>
                     </table>
+                    {advancedActionRow}
                 </details>
                 {errorSection}
                 {actionRow}
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx
index cf7506c..dca86c3 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx
@@ -27,6 +27,7 @@ import AccessibleButton from "../elements/AccessibleButton";
 import { deleteDevicesWithInteractiveAuth } from "./devices/deleteDevices";
 import MatrixClientContext from "../../../contexts/MatrixClientContext";
 import { isDeviceVerified } from "../../../utils/device/isDeviceVerified";
+import TchapUtils from '../../../../../../src/util/TchapUtils';
 
 interface IProps {
     className?: string;
@@ -37,6 +38,7 @@ interface IState {
     deviceLoadError?: string;
     selectedDevices: string[];
     deleting?: boolean;
+    isCrossSigningSupported?: boolean;//:tchap: add a state to detect if crossSigning is supported
 }
 
 export default class DevicesPanel extends React.Component<IProps, IState> {
@@ -54,6 +56,12 @@ export default class DevicesPanel extends React.Component<IProps, IState> {
     }
 
     public componentDidMount(): void {
+        //:tchap: Detect cross signing support once
+        TchapUtils.isCrossSigningSupportedByServer().then((isCrossSigningSupported)=>{
+            this.setState({isCrossSigningSupported: isCrossSigningSupported})
+        });
+        //:end of tchap
+
         this.context.on(CryptoEvent.DevicesUpdated, this.onDevicesUpdated);
         this.loadDevices();
     }
@@ -120,6 +128,13 @@ export default class DevicesPanel extends React.Component<IProps, IState> {
     }
 
     private isDeviceVerified(device: IMyDevice): boolean | null {
+        //:tchap: if cross signing is not supported, use the legacy device check
+        const cli = this.context;
+        if (!this.state.isCrossSigningSupported) {
+            return cli.checkDeviceTrust(cli.getUserId(), device.device_id).isVerified();
+        }
+        //:tchap: end           
+
         return isDeviceVerified(device, this.context);
     }
 
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
index 7ab2273..dbacc05 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
@@ -31,6 +31,7 @@ import AccessibleButton from "../elements/AccessibleButton";
 import QuestionDialog from "../dialogs/QuestionDialog";
 import RestoreKeyBackupDialog from "../dialogs/security/RestoreKeyBackupDialog";
 import { accessSecretStorage } from "../../../SecurityManager";
+import TchapUIFeature from "../../../../../../src/util/TchapUIFeature"; // :TCHAP:
 
 interface IState {
     loading: boolean;
@@ -415,13 +416,15 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
                 </AccessibleButton>,
             );
 
-            if (!isSecureBackupRequired()) {
-                actions.push(
-                    <AccessibleButton key="delete" kind="danger" onClick={this.deleteBackup}>
-                        {_t("Delete Backup")}
-                    </AccessibleButton>,
-                );
-            }
+            // :TCHAP: hide
+            // if (!isSecureBackupRequired()) {
+            //     actions.push(
+            //         <AccessibleButton key="delete" kind="danger" onClick={this.deleteBackup}>
+            //             {_t("Delete Backup")}
+            //         </AccessibleButton>,
+            //     );
+            // }
+            // end :TCHAP:
         } else {
             statusDescription = (
                 <>
@@ -432,7 +435,7 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
                             { b: (sub) => <b>{sub}</b> },
                         )}
                     </p>
-                    <p>{_t("Back up your keys before signing out to avoid losing them.")}</p>
+                    {/* :TCHAP: remove <p>{_t("Back up your keys before signing out to avoid losing them.")}</p> */}
                 </>
             );
             actions.push(
@@ -445,7 +448,9 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
         if (secretStorageKeyInAccount) {
             actions.push(
                 <AccessibleButton key="reset" kind="danger" onClick={this.resetSecretStorage}>
-                    {_t("Reset")}
+                    {/* :TCHAP: change {_t("Reset")} into */}
+                    {_t("Generate a new code")}
+                    {/* end :TCHAP */}
                 </AccessibleButton>,
             );
         }
@@ -463,17 +468,24 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
         let actionRow;
         if (actions.length) {
             actionRow = <div className="mx_SecureBackupPanel_buttonRow">{actions}</div>;
+            // :TCHAP: hide action buttons if secure storage is not supported
+            // actionRow = <div className="mx_SecureBackupPanel_buttonRow">{actions}</div>;
+            if (!TchapUIFeature.isCrossSigningAndSecureStorageActive()) {
+                actionRow = null;
+            }
+            // end :TCHAP:
         }
 
         return (
             <div>
-                <p>
+                 <p>
                     {_t(
                         "Back up your encryption keys with your account data in case you " +
                             "lose access to your sessions. Your keys will be secured with a " +
                             "unique Security Key.",
                     )}
                 </p>
+                
                 {statusDescription}
                 <details>
                     <summary>{_t("Advanced")}</summary>
