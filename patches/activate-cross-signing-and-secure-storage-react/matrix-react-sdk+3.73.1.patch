diff --git a/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx b/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
index fef5d26..88ac753 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
@@ -32,6 +32,8 @@ import { throttle } from "lodash";
 import { CryptoEvent } from "matrix-js-sdk/src/crypto";
 import { RoomType } from "matrix-js-sdk/src/@types/event";
 import { DecryptionError } from "matrix-js-sdk/src/crypto/algorithms";
+//:tchap: import incoming key request handler from tchap project
+import KeyRequestHandler from '../../../../../src/tchap/lib/IncomingKeyRequestHandler';
 
 // focus-visible is a Polyfill for the :focus-visible CSS pseudo-attribute used by various components
 import "focus-visible";
@@ -143,6 +145,7 @@ import { findDMForUser } from "../../utils/dm/findDMForUser";
 import { Linkify } from "../../HtmlUtils";
 import { NotificationColor } from "../../stores/notifications/NotificationColor";
 import { UserTab } from "../views/dialogs/UserTab";
+import TchapUIFeature from "../../../../../src/tchap/util/TchapUIFeature";
 
 // legacy export
 export { default as Views } from "../../Views";
@@ -1587,6 +1590,26 @@ export default class MatrixChat extends React.PureComponent<IProps, IState> {
         cli.on(HttpApiEvent.SessionLoggedOut, () => dft.stop());
         cli.on(MatrixEventEvent.Decrypted, (e, err) => dft.eventDecrypted(e, err as DecryptionError));
 
+        //:tchap: add listener to handle incomingKeyRequest and trigger legacy verification process
+        //the one with the emoji
+        //this listener can be forced with forceLegacyIncomingRoomKeyVerification
+        //or is added only if the xs is not active
+        if(TchapUIFeature.forceLegacyIncomingRoomKeyVerification || 
+            !TchapUIFeature.isCrossSigningAndSecureStorageActive()){
+            /* :TCHAP: DÃ©sactiver le partage legacy de clefs avec les appareils mobiles */
+            console.log(':tchap: activate the legacy incoming key verification')
+            /* end :TCHAP: */
+            const krh = new KeyRequestHandler(cli);
+            cli.on(CryptoEvent.RoomKeyRequest, (req) => {
+                krh.handleKeyRequest(req);
+            });
+    
+             cli.on(CryptoEvent.RoomKeyRequestCancellation, (req) => {
+                krh.handleKeyRequestCancellation(req);
+            });
+        }
+        //:tchap: end of tchap
+        
         cli.on(ClientEvent.Room, (room) => {
             if (MatrixClientPeg.get().isCryptoEnabled()) {
                 const blacklistEnabled = SettingsStore.getValueAt(
@@ -1716,6 +1739,15 @@ export default class MatrixChat extends React.PureComponent<IProps, IState> {
             return;
         }
 
+        //:tchap:
+        if (screen === "sauvegarde-automatique") {
+            //open the security tab
+            //there is no anchor to sauvegarde-automatique subection
+            const payload: OpenToTabPayload = { action: Action.ViewUserSettings, initialTabId: UserTab.Security };
+            dis.dispatch(payload);
+        } else
+        //:tchap: end
+
         if (screen === "register") {
             dis.dispatch({
                 action: "start_registration",
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
index fdc54de..7c83b49 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/CrossSigningPanel.tsx
@@ -29,6 +29,7 @@ import SetupEncryptionDialog from "../dialogs/security/SetupEncryptionDialog";
 import { accessSecretStorage } from "../../../SecurityManager";
 import AccessibleButton from "../elements/AccessibleButton";
 import { SettingsSubsectionText } from "./shared/SettingsSubsection";
+import TchapUIFeature from "../../../../../../src/tchap/util/TchapUIFeature"; // :TCHAP:
 
 interface IState {
     error?: Error;
@@ -230,14 +231,21 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
             userSigningPrivateKeyCached;
 
         const actions: JSX.Element[] = [];
+        // :TCHAP move Reset button to advanced section
+        const advancedActions: JSX.Element[] = [];
+        // end :TCHAP:
 
         // TODO: determine how better to expose this to users in addition to prompts at login/toast
         if (!keysExistEverywhere && homeserverSupportsCrossSigning) {
-            let buttonCaption = _t("Set up Secure Backup");
+            // :TCHAP: change > let buttonCaption = _t("Set up Secure Backup");
+            let buttonCaption = _t("Activate on this device");
+            // end :TCHAP:
+            
             if (crossSigningPrivateKeysInStorage) {
                 buttonCaption = _t("Verify this session");
             }
-            actions.push(
+            // TCHAP: change actions.push(
+            advancedActions.push(
                 <AccessibleButton key="setup" kind="primary" onClick={this.onBootstrapClick}>
                     {buttonCaption}
                 </AccessibleButton>,
@@ -245,7 +253,9 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
         }
 
         if (keysExistAnywhere) {
-            actions.push(
+            // :TCHAP actions.push(
+            advancedActions.push(
+            // end :TCHAP:
                 <AccessibleButton key="reset" kind="danger" onClick={this.resetCrossSigning}>
                     {_t("Reset")}
                 </AccessibleButton>,
@@ -257,6 +267,19 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
             actionRow = <div className="mx_CrossSigningPanel_buttonRow">{actions}</div>;
         }
 
+        // :TCHAP add
+        let advancedActionRow;
+        if (advancedActions.length) {
+            advancedActionRow = <div className="mx_CrossSigningPanel_buttonRow">{advancedActions}</div>;
+        }
+        // end :TCHAP:
+
+        // :TCHAP: hide cross-signing actions if cross-signing is not supported
+        if (!TchapUIFeature.isCrossSigningAndSecureStorageActive()) {
+            actionRow = null;
+        }
+        // end :TCHAP:
+
         return (
             <>
                 {summarisedStatus}
@@ -292,6 +315,7 @@ export default class CrossSigningPanel extends React.PureComponent<{}, IState> {
                             <td>{homeserverSupportsCrossSigning ? _t("exists") : _t("not found")}</td>
                         </tr>
                     </table>
+                    {advancedActionRow}
                 </details>
                 {errorSection}
                 {actionRow}
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
index 7f988d8..27ef5da 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/SecureBackupPanel.tsx
@@ -32,6 +32,7 @@ import QuestionDialog from "../dialogs/QuestionDialog";
 import RestoreKeyBackupDialog from "../dialogs/security/RestoreKeyBackupDialog";
 import { accessSecretStorage } from "../../../SecurityManager";
 import { SettingsSubsectionText } from "./shared/SettingsSubsection";
+import TchapUIFeature from "../../../../../../src/tchap/util/TchapUIFeature"; // :TCHAP:
 
 interface IState {
     loading: boolean;
@@ -252,6 +253,13 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
                 statusDescription = (
                     <>
                         <SettingsSubsectionText>
+                            {_t(
+                                "Your keys are <b>not being backed up from this session</b>.",
+                                {},
+                                { b: (sub) => <b>{sub}</b> },
+                            )}
+                        </SettingsSubsectionText>
+                        {/* :TCHAP remove :<p>
                             {_t(
                                 "This session is <b>not backing up your keys</b>, " +
                                     "but you do have an existing backup you can restore from " +
@@ -266,6 +274,7 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
                                     "losing any keys that may only be on this session.",
                             )}
                         </SettingsSubsectionText>
+                        </p> */}
                     </>
                 );
                 restoreButtonCaption = _t("Connect this session to Key Backup");
@@ -419,13 +428,15 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
                 </AccessibleButton>,
             );
 
-            if (!isSecureBackupRequired(MatrixClientPeg.get())) {
-                actions.push(
-                    <AccessibleButton key="delete" kind="danger" onClick={this.deleteBackup}>
-                        {_t("Delete Backup")}
-                    </AccessibleButton>,
-                );
-            }
+            // :TCHAP: hide
+            // if (!isSecureBackupRequired()) {
+            //     actions.push(
+            //         <AccessibleButton key="delete" kind="danger" onClick={this.deleteBackup}>
+            //             {_t("Delete Backup")}
+            //         </AccessibleButton>,
+            //     );
+            // }
+            // end :TCHAP:
         } else {
             statusDescription = (
                 <>
@@ -435,10 +446,8 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
                             {},
                             { b: (sub) => <b>{sub}</b> },
                         )}
-                    </SettingsSubsectionText>
-                    <SettingsSubsectionText>
-                        {_t("Back up your keys before signing out to avoid losing them.")}
-                    </SettingsSubsectionText>
+                     </SettingsSubsectionText>
+                    {/* :TCHAP: remove <p>{_t("Back up your keys before signing out to avoid losing them.")}</p> */}
                 </>
             );
             actions.push(
@@ -451,7 +460,9 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
         if (secretStorageKeyInAccount) {
             actions.push(
                 <AccessibleButton key="reset" kind="danger" onClick={this.resetSecretStorage}>
-                    {_t("Reset")}
+                    {/* :TCHAP: change {_t("Reset")} into */}
+                    {_t("Generate a new code")}
+                    {/* end :TCHAP */}
                 </AccessibleButton>,
             );
         }
@@ -469,6 +480,12 @@ export default class SecureBackupPanel extends React.PureComponent<{}, IState> {
         let actionRow: JSX.Element | undefined;
         if (actions.length) {
             actionRow = <div className="mx_SecureBackupPanel_buttonRow">{actions}</div>;
+            // :TCHAP: hide action buttons if secure storage is not supported
+            // actionRow = <div className="mx_SecureBackupPanel_buttonRow">{actions}</div>;
+            if (!TchapUIFeature.isCrossSigningAndSecureStorageActive()) {
+                actionRow = null;
+            }
+            // end :TCHAP:
         }
 
         return (
