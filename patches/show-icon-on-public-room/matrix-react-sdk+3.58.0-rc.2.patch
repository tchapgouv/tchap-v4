diff --git a/node_modules/matrix-react-sdk/src/components/views/avatars/DecoratedRoomAvatar.tsx b/node_modules/matrix-react-sdk/src/components/views/avatars/DecoratedRoomAvatar.tsx
index 06ee20c..3a84dcb 100644
--- a/node_modules/matrix-react-sdk/src/components/views/avatars/DecoratedRoomAvatar.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/avatars/DecoratedRoomAvatar.tsx
@@ -34,6 +34,9 @@ import TextWithTooltip from "../elements/TextWithTooltip";
 import DMRoomMap from "../../../utils/DMRoomMap";
 import { IOOBData } from "../../../stores/ThreepidInviteStore";
 import TooltipTarget from "../elements/TooltipTarget";
+import TchapRoomUtils from "../../../../../../src/util/TchapRoomUtils";
+import "../../../../../../res/css/views/avatars/_TchapDecoratedRoomAvatar.pcss";
+import { TchapRoomType } from "../../../../../../src/@types/tchap";
 
 interface IProps {
     room: Room;
@@ -56,6 +59,11 @@ enum Icon {
     // Note: the names here are used in CSS class names
     None = "NONE", // ... except this one
     Globe = "GLOBE",
+    // :TCHAP: add icons for custom room types
+    Forum = "FORUM",
+    Private = "PRIVATE",
+    External = "EXTERNAL",
+    // end :TCHAP:
     PresenceOnline = "ONLINE",
     PresenceAway = "AWAY",
     PresenceOffline = "OFFLINE",
@@ -66,6 +74,14 @@ function tooltipText(variant: Icon) {
     switch (variant) {
         case Icon.Globe:
             return _t("This room is public");
+        // :TCHAP: add icons for custom room types
+        case Icon.Forum:
+            return _t("This room is a public forum");
+        case Icon.Private:
+            return _t("This room is private");
+        case Icon.External:
+            return _t("This room is private and open to external users");
+        // end :TCHAP:
         case Icon.PresenceOnline:
             return _t("Online");
         case Icon.PresenceAway:
@@ -173,7 +189,23 @@ export default class DecoratedRoomAvatar extends React.PureComponent<IProps, ISt
             }
         } else {
             // Track publicity
-            icon = this.isPublicRoom ? Icon.Globe : Icon.None;
+            //icon = this.isPublicRoom ? Icon.Globe : Icon.None;
+            //:tchap: use custom icons for tchap room types
+            const roomType: TchapRoomType = TchapRoomUtils.getTchapRoomType(this.props.room);
+            switch(roomType) {
+                case TchapRoomType.Forum:
+                    icon = Icon.Forum;
+                    break;
+                case TchapRoomType.Private:
+                    icon = Icon.Private;
+                    break;
+                case TchapRoomType.External:
+                    icon = Icon.External;
+                    break;
+                default:
+                    icon = Icon.None;
+            }
+            //end :tchap:
             if (!this.isWatchingTimeline) {
                 this.props.room.on(RoomEvent.Timeline, this.onRoomTimeline);
                 this.isWatchingTimeline = true;
