diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/DecryptionFailureBody.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/DecryptionFailureBody.tsx
index 1a68e58..a32b4ea 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/DecryptionFailureBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/DecryptionFailureBody.tsx
@@ -19,11 +19,25 @@ import { MatrixEvent } from "matrix-js-sdk/src/matrix";
 
 import { _t } from "../../../languageHandler";
 import { IBodyProps } from "./IBodyProps";
+import TchapUrls from "../../../../../../src/tchap/util/TchapUrls"; // :TCHAP:
+import ExternalLink from "../elements/ExternalLink"; // :TCHAP:
 
 function getErrorMessage(mxEvent?: MatrixEvent): string {
     return mxEvent?.isEncryptedDisabledForUnverifiedDevices
         ? _t("timeline|decryption_failure_blocked")
-        : _t("threads|unable_to_decrypt");
+        // :TCHAP: : _t("threads|unable_to_decrypt");
+        : _t(
+            "threads|unable_to_decrypt_with_info_message",
+            {},
+            {
+                a: (sub) => (
+                    <ExternalLink href={TchapUrls.lockedMessagesPage}>
+                        {sub}
+                    </ExternalLink>
+                ),
+            },
+        );
+    // end :TCHAP:
 }
 
 // A placeholder element for messages that could not be decrypted
diff --git a/node_modules/matrix-react-sdk/src/components/views/rooms/ThreadSummary.tsx b/node_modules/matrix-react-sdk/src/components/views/rooms/ThreadSummary.tsx
index 7a55c89..57878ff 100644
--- a/node_modules/matrix-react-sdk/src/components/views/rooms/ThreadSummary.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/rooms/ThreadSummary.tsx
@@ -30,6 +30,8 @@ import MatrixClientContext from "../../../contexts/MatrixClientContext";
 import { Action } from "../../../dispatcher/actions";
 import { ShowThreadPayload } from "../../../dispatcher/payloads/ShowThreadPayload";
 import defaultDispatcher from "../../../dispatcher/dispatcher";
+import ExternalLink from "../elements/ExternalLink"; // :TCHAP:
+import TchapUrls from "../../../../../../src/tchap/util/TchapUrls"; // :TCHAP:
 
 interface IProps {
     mxEvent: MatrixEvent;
@@ -96,6 +98,20 @@ export const ThreadMessagePreview: React.FC<IPreviewProps> = ({ thread, showDisp
         return null;
     }
 
+    // :TCHAP:
+    const undecryptedText = _t(
+        "threads|unable_to_decrypt_with_info_message",
+        {},
+        {
+            a: (sub) => (
+                <ExternalLink href={TchapUrls.lockedMessagesPage}>
+                    {sub}
+                </ExternalLink>
+            ),
+        },
+    );
+    // end :TCHAP:
+
     return (
         <>
             <MemberAvatar
@@ -113,7 +129,20 @@ export const ThreadMessagePreview: React.FC<IPreviewProps> = ({ thread, showDisp
                     className="mx_ThreadSummary_content mx_DecryptionFailureBody"
                     title={_t("threads|unable_to_decrypt")}
                 >
-                    <span className="mx_ThreadSummary_message-preview">{_t("threads|unable_to_decrypt")}</span>
+                    { /* :TCHAP: <span className="mx_ThreadSummary_message-preview">{_t("threads|unable_to_decrypt")}</span>*/}
+                    <span className="mx_ThreadSummary_message-preview">
+                        {_t("threads|unable_to_decrypt_with_info_message", {},
+                            {
+                                a: (sub) => (
+                                    <ExternalLink href={TchapUrls.lockedMessagesPage}>
+                                        {sub}
+                                    </ExternalLink>
+                                ),
+                            },
+                        )}
+                    </span>
+                    {/** end :TCHAP: */}
+
                 </div>
             ) : (
                 <div className="mx_ThreadSummary_content" title={preview}>
