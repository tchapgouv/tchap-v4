diff --git a/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss b/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
index 53d5988..9b8ad77 100644
--- a/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
+++ b/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
@@ -16,7 +16,12 @@ limitations under the License.
 */
 
 .mx_CompleteSecurityBody {
+    /* :TCHAP:
     width: 600px;
+    */
+    width: 660px;
+    /* end :TCHAP: */
+
     color: $authpage-primary-color;
     background-color: $background;
     border-radius: 4px;
diff --git a/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx b/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
index 036fb50..bb1d8cd 100644
--- a/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
+++ b/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
@@ -211,13 +211,38 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                 backupInfo ? await cli.getCrypto()?.isKeyBackupTrusted(backupInfo) : undefined;
 
             const { forceReset } = this.props;
-            const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ChooseKeyPassphrase;
+            // :tchap: const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ChooseKeyPassphrase;
+            const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ShowKey;//:tchap: goes directly to showke
 
+            /* :TCHAP: remove
             this.setState({
                 phase,
                 backupInfo,
                 backupTrustInfo,
             });
+            end :TCHAP: */
+
+            // add :TCHAP:
+            if (phase === Phase.ShowKey) {
+                this.recoveryKey = await cli.createRecoveryKeyFromPassphrase();
+                this.setState({
+                    phase,
+                    backupInfo,
+                    backupTrustInfo,
+                    passPhraseKeySelected:SecureBackupSetupMethod.Key,
+                    copied: false,
+                    downloaded: false,
+                    setPassphrase: false
+                });
+            } else {
+                //if phase is Phase.Migrate
+                this.setState({
+                    phase,
+                    backupInfo,
+                    backupTrustInfo,
+                });
+            }
+            // end :TCHAP:
 
             return backupTrustInfo;
         } catch (e) {
@@ -744,10 +769,23 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
         if (this.state.phase === Phase.ShowKey) {
             continueButton = (
                 <DialogButtons
+                    /* :TCHAP:
                     primaryButton={_t("action|continue")}
                     disabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}
+                    */
+                    primaryButton={_t("I wrote down my code")}
+                    primaryDisabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}
+                    // end :TCHAP:
+
                     onPrimaryButtonClick={this.onShowKeyContinueClick}
+
+                    /* :TCHAP:
                     hasCancel={false}
+                    */
+                    hasCancel={true}
+                    onCancel={this.onCancel}
+                    cancelButtonClass="mx_AccessibleButton mx_AccessibleButton_hasKind mx_AccessibleButton_kind_danger_outline"
+                    // end :TCHAP:
                 />
             );
         } else {
@@ -760,6 +798,10 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
 
         return (
             <div>
+                {/* tchap: add this <p /> */}
+                <p>{_t("This is your recovery key")}</p>
+                <p><b>{_t("Warning: this is the only time this code will be displayed!")}</b></p>
+                {/* end tchap */}
                 <p>{_t("settings|key_backup|setup_secure_backup|security_key_safety_reminder")}</p>
                 <div className="mx_CreateSecretStorageDialog_primaryContainer mx_CreateSecretStorageDialog_recoveryKeyPrimarycontainer">
                     <div className="mx_CreateSecretStorageDialog_recoveryKeyContainer">
@@ -767,6 +809,7 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                             <code ref={this.recoveryKeyNode}>{this.recoveryKey?.encodedPrivateKey}</code>
                         </div>
                         <div className="mx_CreateSecretStorageDialog_recoveryKeyButtons">
+                            {/* :TCHAP: remove
                             <AccessibleButton
                                 kind="primary"
                                 className="mx_Dialog_primary"
@@ -781,6 +824,7 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                                     copyButton: "",
                                 })}
                             </span>
+                            end :TCHAP: */}
                             <AccessibleButton
                                 kind="primary"
                                 className="mx_Dialog_primary mx_CreateSecretStorageDialog_recoveryKeyButtons_copyBtn"
diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
index 71e47a8..a852a28 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
@@ -66,7 +66,9 @@ export default class CompleteSecurity extends React.Component<IProps, IState> {
             return null;
         } else if (phase === Phase.Intro) {
             if (lostKeys) {
+                /* :tchap: hide anxious icon of warning
                 icon = <span className="mx_CompleteSecurity_headerIcon mx_E2EIcon_warning" />;
+                end :tchap: */
                 title = _t("encryption|verification|after_new_login|unable_to_verify");
             } else {
                 icon = <span className="mx_CompleteSecurity_headerIcon mx_E2EIcon_warning" />;
@@ -92,9 +94,16 @@ export default class CompleteSecurity extends React.Component<IProps, IState> {
 
         let skipButton;
         if (phase === Phase.Intro || phase === Phase.ConfirmReset) {
+            // :Tchap: Condition to skip Phase.ConfirmSkip and its "Are you sure" modal after login for csss
+            const tchapOnSkipClick = phase === Phase.Intro ? this.props.onFinished : this.onSkipClick;
+            // end :Tchap:
+
             skipButton = (
                 <AccessibleButton
-                    onClick={this.onSkipClick}
+                    // :tchap: remove onClick={this.onSkipClick}
+                    // add instead
+                    onClick={tchapOnSkipClick}
+                    // end :tchap:
                     className="mx_CompleteSecurity_skip"
                     aria-label={_t("encryption|verification|after_new_login|skip_verification")}
                 />
diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx
index 3ad4638..4558f5d 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx
@@ -28,6 +28,10 @@ import { SetupEncryptionStore, Phase } from "../../../stores/SetupEncryptionStor
 import EncryptionPanel from "../../views/right_panel/EncryptionPanel";
 import AccessibleButton, { ButtonEvent } from "../../views/elements/AccessibleButton";
 import Spinner from "../../views/elements/Spinner";
+import defaultDispatcher from "../../../dispatcher/dispatcher";
+import { Action } from "matrix-react-sdk/src/dispatcher/actions";
+import { UserTab } from "matrix-react-sdk/src/components/views/dialogs/UserTab";
+import { OpenToTabPayload } from "matrix-react-sdk/src/dispatcher/payloads/OpenToTabPayload";
 
 function keyHasPassphrase(keyInfo: ISecretStorageKeyInfo): boolean {
     return Boolean(keyInfo.passphrase && keyInfo.passphrase.salt && keyInfo.passphrase.iterations);
@@ -159,11 +163,22 @@ export default class SetupEncryptionBody extends React.Component<IProps, IState>
             if (lostKeys) {
                 return (
                     <div>
-                        <p>{_t("encryption|verification|no_key_or_device")}</p>
+                        { /*:TCHAP: change <p>{_t("encryption|verification|no_key_or_device")}</p> */ }
+                        <p>
+                            {_t(
+                                "<p>The Tchap team is working on the deployment of a new feature to "+
+                                "prevent encryption key loss.</p>"+
+                                "<p> You can access it in the section :</p><p>Security and privacy > Secure Backup</p>",
+                                 {}, { 'p': (sub) => <p>{sub}</p>}
+                            )}
+                        </p>
+                        {/* end :TCHAP: */}
 
                         <div className="mx_CompleteSecurity_actionRow">
                             <AccessibleButton kind="primary" onClick={this.onResetConfirmClick}>
-                                {_t("encryption|verification|reset_proceed_prompt")}
+                                {/* :TCHAP: _t("encryption|verification|reset_proceed_prompt") */}
+                                {_t("Set up")}
+                                {/* end :TCHAP: */}
                             </AccessibleButton>
                         </div>
                     </div>
diff --git a/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts b/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
index e55e665..b759430 100644
--- a/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
+++ b/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
@@ -50,7 +50,11 @@ const getIcon = (kind: Kind): string => {
 const getSetupCaption = (kind: Kind): string => {
     switch (kind) {
         case Kind.SET_UP_ENCRYPTION:
+            /* :TCHAP:
             return _t("action|continue");
+            */
+            return _t("action|enable");
+            // end :TCHAP:
         case Kind.UPGRADE_ENCRYPTION:
             return _t("action|upgrade");
         case Kind.VERIFY_THIS_SESSION:
