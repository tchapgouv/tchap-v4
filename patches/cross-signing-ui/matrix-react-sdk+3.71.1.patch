diff --git a/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss b/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
index c23f53b..7aa9f25 100644
--- a/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
+++ b/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
@@ -16,7 +16,12 @@ limitations under the License.
 */
 
 .mx_CompleteSecurityBody {
+    /* :TCHAP:
     width: 600px;
+    */
+    width: 660px;
+    /* end :TCHAP: */
+
     color: $authpage-primary-color;
     background-color: $background;
     border-radius: 4px;
diff --git a/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx b/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
index 3e48739..926d18b 100644
--- a/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
+++ b/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
@@ -182,13 +182,38 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                     : null;
 
             const { forceReset } = this.props;
-            const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ChooseKeyPassphrase;
+            // :tchap: const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ChooseKeyPassphrase;
+            const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ShowKey;//:tchap: goes directly to showkey
 
+            /* :TCHAP: remove
             this.setState({
                 phase,
                 backupInfo,
                 backupSigStatus,
             });
+            end :TCHAP: */
+
+            // add :TCHAP:
+            if (phase === Phase.ShowKey) {
+                this.recoveryKey = await MatrixClientPeg.get().createRecoveryKeyFromPassphrase();
+                this.setState({
+                    phase,
+                    backupInfo,
+                    backupSigStatus,
+                    passPhraseKeySelected:SecureBackupSetupMethod.Key,
+                    copied: false,
+                    downloaded: false,
+                    setPassphrase: false 
+                });
+            } else {
+                //if phase is Phase.Migrate
+                this.setState({
+                    phase,
+                    backupInfo,
+                    backupSigStatus,
+                });
+            }
+            // end :TCHAP:
 
             return {
                 backupInfo: backupInfo ?? undefined,
@@ -728,10 +753,17 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
         if (this.state.phase === Phase.ShowKey) {
             continueButton = (
                 <DialogButtons
-                    primaryButton={_t("Continue")}
-                    disabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}
+                    // :tchap: change label
+                    // primaryButton={_t("Continue")}
+                    primaryButton={_t("I wrote down my code")}
+                    cancelButtonClass="mx_AccessibleButton mx_AccessibleButton_hasKind mx_AccessibleButton_kind_danger_outline"
+                    hasCancel
+                    onCancel={this.onCancel}
+                    primaryDisabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}
+                    // end :tchap:
+                    // TCHAP: disabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}
                     onPrimaryButtonClick={this.onShowKeyContinueClick}
-                    hasCancel={false}
+                    // TCHAP: hasCancel={false}
                 />
             );
         } else {
@@ -744,6 +776,10 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
 
         return (
             <div>
+                {/* tchap: add this <p /> */}
+                <p>{_t("This is your recovery key")}</p>
+                <p><b>{_t("Warning: this is the only time this code will be displayed!")}</b></p>
+                {/* end tchap */}
                 <p>
                     {_t(
                         "Store your Security Key somewhere safe, like a password manager or a safe, " +
@@ -756,6 +792,7 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                             <code ref={this.recoveryKeyNode}>{this.recoveryKey.encodedPrivateKey}</code>
                         </div>
                         <div className="mx_CreateSecretStorageDialog_recoveryKeyButtons">
+                            {/* :TCHAP: remove
                             <AccessibleButton
                                 kind="primary"
                                 className="mx_Dialog_primary"
@@ -770,6 +807,7 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                                     copyButton: "",
                                 })}
                             </span>
+                            end :TCHAP: */}
                             <AccessibleButton
                                 kind="primary"
                                 className="mx_Dialog_primary mx_CreateSecretStorageDialog_recoveryKeyButtons_copyBtn"
diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
index 3171a0e..28c510d 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
@@ -66,7 +66,9 @@ export default class CompleteSecurity extends React.Component<IProps, IState> {
             return null;
         } else if (phase === Phase.Intro) {
             if (lostKeys) {
-                icon = <span className="mx_CompleteSecurity_headerIcon mx_E2EIcon_warning" />;
+                //:tchap: hide anxious icon of warning
+                //icon = <span className="mx_CompleteSecurity_headerIcon mx_E2EIcon_warning" />;
+                //:tchap: end
                 title = _t("Unable to verify this device");
             } else {
                 icon = <span className="mx_CompleteSecurity_headerIcon mx_E2EIcon_warning" />;
@@ -92,9 +94,16 @@ export default class CompleteSecurity extends React.Component<IProps, IState> {
 
         let skipButton;
         if (phase === Phase.Intro || phase === Phase.ConfirmReset) {
+            // :Tchap: Condition to skip Phase.ConfirmSkip and its "Are you sure" modal after login for csss
+            const tchapOnSkipClick = phase === Phase.Intro ? this.props.onFinished : this.onSkipClick;
+            // end :Tchap:
+
             skipButton = (
                 <AccessibleButton
-                    onClick={this.onSkipClick}
+                    // :tchap: remove onClick={this.onSkipClick}
+                    // add instead
+                    onClick={tchapOnSkipClick}
+                    // end :tchap:
                     className="mx_CompleteSecurity_skip"
                     aria-label={_t("Skip verification for now")}
                 />
diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx
index 2cbfbf8..17e3d2f 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx
@@ -28,6 +28,10 @@ import { SetupEncryptionStore, Phase } from "../../../stores/SetupEncryptionStor
 import EncryptionPanel from "../../views/right_panel/EncryptionPanel";
 import AccessibleButton from "../../views/elements/AccessibleButton";
 import Spinner from "../../views/elements/Spinner";
+import defaultDispatcher from "../../../dispatcher/dispatcher";
+import { Action } from "matrix-react-sdk/src/dispatcher/actions";
+import { UserTab } from "matrix-react-sdk/src/components/views/dialogs/UserTab";
+import { OpenToTabPayload } from "matrix-react-sdk/src/dispatcher/payloads/OpenToTabPayload";
 
 function keyHasPassphrase(keyInfo: ISecretStorageKeyInfo): boolean {
     return Boolean(keyInfo.passphrase && keyInfo.passphrase.salt && keyInfo.passphrase.iterations);
@@ -160,17 +164,27 @@ export default class SetupEncryptionBody extends React.Component<IProps, IState>
                 return (
                     <div>
                         <p>
+                            {/* :tchap: change message format by adding <p>
                             {_t(
                                 "It looks like you don't have a Security Key or any other devices you can " +
                                     "verify against.  This device will not be able to access old encrypted messages. " +
                                     "In order to verify your identity on this device, you'll need to reset " +
                                     "your verification keys.",
                             )}
+                            :tchap: end
+                            */}
+
+                            {_t(
+                                "<p>The Tchap team is working on the deployment of a new feature to "+
+                                "prevent encryption key loss.</p>"+
+                                "<p> You can access it in the section :</p><p>Security and privacy > Secure Backup</p>",
+                                 {}, { 'p': (sub) => <p>{sub}</p>}      
+                            )}
                         </p>
 
                         <div className="mx_CompleteSecurity_actionRow">
                             <AccessibleButton kind="primary" onClick={this.onResetConfirmClick}>
-                                {_t("Proceed with reset")}
+                                {_t("Set up")}
                             </AccessibleButton>
                         </div>
                     </div>
diff --git a/node_modules/matrix-react-sdk/src/components/views/rooms/DecryptionFailureBar.tsx b/node_modules/matrix-react-sdk/src/components/views/rooms/DecryptionFailureBar.tsx
index 94cf02d..8deef31 100644
--- a/node_modules/matrix-react-sdk/src/components/views/rooms/DecryptionFailureBar.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/rooms/DecryptionFailureBar.tsx
@@ -29,6 +29,7 @@ import MatrixClientContext from "../../../contexts/MatrixClientContext";
 import SetupEncryptionDialog from "../dialogs/security/SetupEncryptionDialog";
 import { SetupEncryptionStore } from "../../../stores/SetupEncryptionStore";
 import Spinner from "../elements/Spinner";
+import TchapUrls from "../../../../../../src/tchap/util/TchapUrls";
 
 interface IProps {
     failures: MatrixEvent[];
@@ -193,6 +194,7 @@ export const DecryptionFailureBar: React.FC<IProps> = ({ failures }) => {
                     )}
                 </React.Fragment>
             );
+            /* :tchap: replace reset button by open-security button
             button = (
                 <AccessibleButton
                     className="mx_DecryptionFailureBar_end_button"
@@ -203,28 +205,43 @@ export const DecryptionFailureBar: React.FC<IProps> = ({ failures }) => {
                     {_t("Reset")}
                 </AccessibleButton>
             );
+            */
+            button = (
+                <AccessibleButton kind="primary" onClick={onDeviceListClick}>
+                    {_t("Security & Privacy")}
+                </AccessibleButton>
+            );
+            /* :tchap: end */
         }
     } else if (hasOtherVerifiedDevices) {
         className = "mx_DecryptionFailureBar mx_DecryptionFailureBar--withEnd";
         headline = <React.Fragment>{_t("Open another device to load encrypted messages")}</React.Fragment>;
-        message = (
-            <React.Fragment>
-                {_t(
-                    "This device is requesting decryption keys from your other devices. " +
-                        "Opening one of your other devices may speed this up.",
-                )}
-            </React.Fragment>
-        );
-        button = (
-            <AccessibleButton
-                className="mx_DecryptionFailureBar_end_button"
-                kind="primary_outline"
-                onClick={onDeviceListClick}
-                data-testid="decryption-failure-bar-button"
-            >
-                {_t("View your device list")}
-            </AccessibleButton>
-        );
+        /* :TCHAP: Add for N bug */ message = <React.Fragment>{_t(
+            "Or if that doesn't work, please follow <a>these steps</a>.",
+            {},
+            {a: (sub)=><a href={TchapUrls.lockedMessagesPage} target="_blank">{sub}</a>}
+        )}</React.Fragment>;
+        
+        // :TCHAP: shrink long banner
+        // message = (
+        //     <React.Fragment>
+        //         {_t(
+        //             "This device is requesting decryption keys from your other devices. " +
+        //                 "Opening one of your other devices may speed this up.",
+        //         )}
+        //     </React.Fragment>
+        // );
+        // button = (
+        //     <AccessibleButton
+        //         className="mx_DecryptionFailureBar_end_button"
+        //         kind="primary_outline"
+        //         onClick={onDeviceListClick}
+        //         data-testid="decryption-failure-bar-button"
+        //     >
+        //         {_t("View your device list")}
+        //     </AccessibleButton>
+        // );
+        // end :TCHAP:
     } else {
         className = "mx_DecryptionFailureBar";
         headline = <React.Fragment>{_t("Some messages could not be decrypted")}</React.Fragment>;
diff --git a/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts b/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
index 3b60705..80565f8 100644
--- a/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
+++ b/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
@@ -50,7 +50,9 @@ const getIcon = (kind: Kind): string => {
 const getSetupCaption = (kind: Kind): string => {
     switch (kind) {
         case Kind.SET_UP_ENCRYPTION:
-            return _t("Continue");
+            // :tchap: return _t("Continue");
+            return _t("Activate");
+            // end :tchap:
         case Kind.UPGRADE_ENCRYPTION:
             return _t("Upgrade");
         case Kind.VERIFY_THIS_SESSION:
