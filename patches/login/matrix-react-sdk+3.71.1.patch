diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/Login.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/Login.tsx
index 4314726..0a34f0e 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/Login.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/Login.tsx
@@ -40,6 +40,7 @@ import AuthHeader from "../../views/auth/AuthHeader";
 import AccessibleButton, { ButtonEvent } from "../../views/elements/AccessibleButton";
 import { ValidatedServerConfig } from "../../../utils/ValidatedServerConfig";
 import { filterBoolean } from "../../../utils/arrays";
+import TchapUtils from '../../../../../../src/tchap/util/TchapUtils'; // :TCHAP:
 
 // These are used in several places, and come from the js-sdk's autodiscovery
 // stuff. We define them here so that they'll be picked up by i18n.
@@ -167,12 +168,22 @@ export default class LoginComponent extends React.PureComponent<IProps, IState>
 
     public isBusy = (): boolean => !!this.state.busy || !!this.props.busy;
 
+    tchap_setServerInMemory = async (serverConfig) => {
+        const validatedServerConf = TchapUtils.makeValidatedServerConfig(serverConfig);
+
+        // Simulate the end of the serverPicker component flow.
+        this.props.onServerConfigChange(validatedServerConf);
+
+        await this.initLoginLogic(validatedServerConf);
+    };
+
     public onPasswordLogin: OnPasswordLogin = async (
         username: string | undefined,
         phoneCountry: string | undefined,
         phoneNumber: string | undefined,
         password: string,
     ): Promise<void> => {
+        /* :TCHAP: remove alive check, we don't know which server to call yet.
         if (!this.state.serverIsAlive) {
             this.setState({ busy: true });
             // Do a quick liveliness check on the URLs
@@ -198,6 +209,7 @@ export default class LoginComponent extends React.PureComponent<IProps, IState>
                 return;
             }
         }
+        end :TCHAP: */
 
         this.setState({
             busy: true,
@@ -206,6 +218,22 @@ export default class LoginComponent extends React.PureComponent<IProps, IState>
             loginIncorrect: false,
         });
 
+        /* :TCHAP: fetch homeserver corresponding to email */
+        const serverResult = await TchapUtils.fetchHomeserverForEmail(username);
+
+        if (!serverResult) {
+            this.setState({
+                busy: false,
+                busyLoggingIn: false,
+                errorText: _t('Server unavailable, overloaded, or something else went wrong.'), // reuse existing string
+                loginIncorrect: false,
+            });
+            return;
+        }
+
+        await this.tchap_setServerInMemory(serverResult);
+        /** end :TCHAP: */
+
         this.loginLogic.loginViaPassword(username, phoneCountry, phoneNumber, password).then(
             (data) => {
                 this.setState({ serverIsAlive: true }); // it must be, we logged in.
@@ -253,6 +281,10 @@ export default class LoginComponent extends React.PureComponent<IProps, IState>
                     } else {
                         errorText = _t("Incorrect username and/or password.");
                     }
+                // :TCHAP: display proper message for TOO_MANY_REQUESTS
+                } else if (error.httpStatus === 429) {
+                    errorText = _t("Your last three login attempts have failed. Please try again in a few minutes.");
+                // end :TCHAP:
                 } else {
                     // other errors, not specific to doing a password login
                     errorText = this.errorTextFromError(error);
@@ -629,10 +661,12 @@ export default class LoginComponent extends React.PureComponent<IProps, IState>
                     </h1>
                     {errorTextSection}
                     {serverDeadSection}
+                    { /* :TCHAP: remove server picker, we don't allow user to chose, server is assigned to each email.
                     <ServerPicker
                         serverConfig={this.props.serverConfig}
                         onServerConfigChange={this.props.onServerConfigChange}
                     />
+                    end :TCHAP :*/}
                     {this.renderLoginComponentForFlows()}
                     {footer}
                 </AuthBody>
diff --git a/node_modules/matrix-react-sdk/src/components/views/auth/PasswordLogin.tsx b/node_modules/matrix-react-sdk/src/components/views/auth/PasswordLogin.tsx
index 7275055..bb8f0ad 100644
--- a/node_modules/matrix-react-sdk/src/components/views/auth/PasswordLogin.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/auth/PasswordLogin.tsx
@@ -85,7 +85,10 @@ export default class PasswordLogin extends React.PureComponent<IProps, IState> {
         this.state = {
             // Field error codes by field ID
             fieldValid: {},
-            loginType: LoginField.MatrixId,
+            // :TCHAP: force email login
+            // loginType: LoginField.MatrixId,
+            loginType: LoginField.Email,
+            //
             password: "",
         };
     }
@@ -420,7 +423,11 @@ export default class PasswordLogin extends React.PureComponent<IProps, IState> {
         return (
             <div>
                 <form onSubmit={this.onSubmitForm}>
-                    {loginType}
+                    {
+                        /* :TCHAP: remove loginType selector, we only want Email loginType
+                        loginType
+                        */
+                    }
                     {loginField}
                     <Field
                         id="mx_LoginForm_password"
