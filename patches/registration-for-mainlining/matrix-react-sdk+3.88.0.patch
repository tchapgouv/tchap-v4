diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/Registration.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/Registration.tsx
index 4da7282..4928a4b 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/Registration.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/Registration.tsx
@@ -50,11 +50,15 @@ import InteractiveAuth, { InteractiveAuthCallback } from "../InteractiveAuth";
 import Spinner from "../../views/elements/Spinner";
 import { AuthHeaderDisplay } from "./header/AuthHeaderDisplay";
 import { AuthHeaderProvider } from "./header/AuthHeaderProvider";
+import { AuthHeaderModifier } from './header/AuthHeaderModifier'; // :TCHAP:
 import SettingsStore from "../../../settings/SettingsStore";
 import { ValidatedServerConfig } from "../../../utils/ValidatedServerConfig";
 import { Features } from "../../../settings/Settings";
 import { startOidcLogin } from "../../../utils/oidc/authorize";
 
+import TchapUtils from '../../../../../../src/tchap/util/TchapUtils'; // :TCHAP:
+import TchapUrls from "../../../../../../src/tchap/util/TchapUrls";
+
 const debuglog = (...args: any[]): void => {
     if (SettingsStore.getValue("debug_registration")) {
         logger.log.call(console, "Registration debuglog:", ...args);
@@ -308,11 +312,24 @@ export default class Registration extends React.Component<IProps, IState> {
     }
 
     private onFormSubmit = async (formVals: Record<string, string>): Promise<void> => {
+        // :TCHAP: find the server corresponding to the entered email
+        const server = await TchapUtils.fetchHomeserverForEmail(formVals.email);
+        const validatedServerConfig = TchapUtils.makeValidatedServerConfig(server);
+        // Note : onServerConfigChange triggers a state change at the matrixChat level. All the children are rerendered.
+        this.props.onServerConfigChange(validatedServerConfig);
+        // end :TCHAP:
+
         this.setState({
             errorText: "",
             busy: true,
             formVals,
             doingUIAuth: true,
+            // :TCHAP: pass a new temporary client so that InteractiveAuth is set up with the right serverconfig.
+            matrixClient: createClient({
+                baseUrl: validatedServerConfig.hsUrl,
+                idBaseUrl: validatedServerConfig.isUrl,
+            }),
+            // end :TCHAP:
         });
     };
 
@@ -360,6 +377,10 @@ export default class Registration extends React.Component<IProps, IState> {
                 errorText = _t("auth|username_in_use");
             } else if (response instanceof MatrixError && response.errcode === "M_THREEPID_IN_USE") {
                 errorText = _t("auth|3pid_in_use");
+            // :TCHAP: add error message for common case
+            } else if (response instanceof MatrixError && response.errcode === "M_THREEPID_DENIED") {
+                errorText = _t("That email is not allowed on Tchap", {}, {a: (sub)=><a href={TchapUrls.requestDomainUrl}>{sub}</a>});
+            // end :TCHAP:
             }
 
             this.setState({
@@ -491,6 +512,11 @@ export default class Registration extends React.Component<IProps, IState> {
             inhibit_login: undefined,
         };
         if (auth) registerParams.auth = auth;
+        //:tchap: do not send username as tchap workflow does not use username
+        // https://github.com/tchapgouv/tchap-web-v4/issues/281
+        registerParams.username = undefined;
+        //:tchap end
+
         debuglog("Registration: sending registration request:", auth);
         return this.state.matrixClient.registerRequest(registerParams);
     };
@@ -740,6 +766,12 @@ export default class Registration extends React.Component<IProps, IState> {
                             {errorText}
                             {serverDeadSection}
                         </AuthHeaderDisplay>
+                        { /* :TCHAP: remove the serverpicker, using AuthHeaderModifier. Inspired by InteractiveAuthEntryComponents. */}
+                        <AuthHeaderModifier
+                            title={_t("auth|register_action") /* we actually don't want to set this. */}
+                            hideServerPicker={true}
+                        />
+                        { /* end :TCHAP: */}
                         {this.renderRegisterComponent()}
                     </div>
                     <div className="mx_Register_footerActions">
diff --git a/node_modules/matrix-react-sdk/src/components/views/auth/RegistrationForm.tsx b/node_modules/matrix-react-sdk/src/components/views/auth/RegistrationForm.tsx
index 8c17216..36f6ccb 100644
--- a/node_modules/matrix-react-sdk/src/components/views/auth/RegistrationForm.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/auth/RegistrationForm.tsx
@@ -267,7 +267,7 @@ export default class RegistrationForm extends React.PureComponent<IProps, IState
     };
 
     private validateEmailRules = withValidation({
-        description: () => _t("auth|reset_password_email_field_description"),
+        // :TCHAP: this is confusing because email=username in the Tchap case. //description: () => _t("auth|reset_password_email_field_description"),
         hideDescriptionIfValid: true,
         rules: [
             {
@@ -275,7 +275,10 @@ export default class RegistrationForm extends React.PureComponent<IProps, IState
                 test(this: RegistrationForm, { value, allowEmpty }) {
                     return allowEmpty || !this.authStepIsRequired("m.login.email.identity") || !!value;
                 },
-                invalid: () => _t("auth|reset_password_email_field_required_invalid"),
+                // :TCHAP: don't mention homeserver, Tchap hides the concept from users.
+                //invalid: () => _t("auth|reset_password_email_field_required_invalid"),
+                invalid: () => _t("auth|email_field_label_required"),
+                // end :TCHAP:
             },
             {
                 key: "email",
@@ -568,16 +571,23 @@ export default class RegistrationForm extends React.PureComponent<IProps, IState
         return (
             <div>
                 <form onSubmit={this.onSubmit}>
-                    <div className="mx_AuthBody_fieldRow">{this.renderUsername()}</div>
+                    { /* :TCHAP: remove username field, the server will generate it from email.
                     <div className="mx_AuthBody_fieldRow">
-                        {this.renderPassword()}
-                        {this.renderPasswordConfirm()}
+                        { this.renderUsername() }
+                    </div>
+                    end :TCHAP: */}
+
+                    { /** :TCHAP: switch fields : email first, password under */}
+                    <div className="mx_AuthBody_fieldRow">
+                        { this.renderEmail() }
+                        { this.renderPhoneNumber() }
                     </div>
                     <div className="mx_AuthBody_fieldRow">
-                        {this.renderEmail()}
-                        {this.renderPhoneNumber()}
+                        { this.renderPassword() }
+                        { this.renderPasswordConfirm() }
                     </div>
-                    {emailHelperText}
+                    { /* end :TCHAP: */}
+                    { /** :TCHAP: remove helper text, adds confusion since email=username in tchap. // emailHelperText */ }
                     {registerButton}
                 </form>
             </div>
