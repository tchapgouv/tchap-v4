diff --git a/node_modules/matrix-react-sdk/src/components/views/context_menus/MessageContextMenu.tsx b/node_modules/matrix-react-sdk/src/components/views/context_menus/MessageContextMenu.tsx
index 9fc7ca8..4f97de2 100644
--- a/node_modules/matrix-react-sdk/src/components/views/context_menus/MessageContextMenu.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/context_menus/MessageContextMenu.tsx
@@ -693,7 +693,9 @@ export default class MessageContextMenu extends React.Component<IProps, IState>
                 <IconizedContextMenuOptionList>
                     {reactButton}
                     {replyButton}
+                    {/* :TCHAP: Remove Reply In Thread Button
                     {replyInThreadButton}
+                    end :TCHAP: */}
                     {editButton}
                 </IconizedContextMenuOptionList>
             );
diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/MessageActionBar.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/MessageActionBar.tsx
index 22f1317..1c21863 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/MessageActionBar.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/MessageActionBar.tsx
@@ -374,18 +374,21 @@ export default class MessageActionBar extends React.PureComponent<IMessageAction
     private readonly forbiddenThreadHeadMsgType = [MsgType.KeyVerificationRequest];
 
     private get showReplyInThreadAction(): boolean {
-        const inNotThreadTimeline = this.context.timelineRenderingType !== TimelineRenderingType.Thread;
-
-        const isAllowedMessageType =
-            !this.forbiddenThreadHeadMsgType.includes(this.props.mxEvent.getContent().msgtype as MsgType) &&
-            /** forbid threads from live location shares
-             * until cross-platform support
-             * (PSF-1041)
-             */
-            !M_BEACON_INFO.matches(this.props.mxEvent.getType()) &&
-            !(this.props.mxEvent.getType() === VoiceBroadcastInfoEventType);
-
-        return inNotThreadTimeline && isAllowedMessageType;
+        // :TCHAP: hide thread button
+        return false;
+        // const inNotThreadTimeline = this.context.timelineRenderingType !== TimelineRenderingType.Thread;
+
+        // const isAllowedMessageType =
+        //     !this.forbiddenThreadHeadMsgType.includes(this.props.mxEvent.getContent().msgtype as MsgType) &&
+        //     /** forbid threads from live location shares
+        //      * until cross-platform support
+        //      * (PSF-1041)
+        //      */
+        //     !M_BEACON_INFO.matches(this.props.mxEvent.getType()) &&
+        //     !(this.props.mxEvent.getType() === VoiceBroadcastInfoEventType);
+
+        // return inNotThreadTimeline && isAllowedMessageType;
+        // end :TCHAP
     }
 
     /**
diff --git a/node_modules/matrix-react-sdk/src/components/views/right_panel/RoomHeaderButtons.tsx b/node_modules/matrix-react-sdk/src/components/views/right_panel/RoomHeaderButtons.tsx
index 4cc292e..c2d7c95 100644
--- a/node_modules/matrix-react-sdk/src/components/views/right_panel/RoomHeaderButtons.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/right_panel/RoomHeaderButtons.tsx
@@ -292,6 +292,7 @@ export default class RoomHeaderButtons extends HeaderButtons<IProps> {
                 onClick={this.onTimelineCardClicked}
             />,
         );
+        /* :TCHAP: Remove Thread from Header Buttons
         rightPanelPhaseButtons.set(
             RightPanelPhases.ThreadPanel,
             <HeaderButton
@@ -306,6 +307,7 @@ export default class RoomHeaderButtons extends HeaderButtons<IProps> {
                 <UnreadIndicator color={this.state.threadNotificationColor} />
             </HeaderButton>,
         );
+        end :TCHAP: */
         rightPanelPhaseButtons.set(
             RightPanelPhases.NotificationPanel,
             <HeaderButton
