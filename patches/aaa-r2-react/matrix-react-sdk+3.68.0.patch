diff --git a/node_modules/matrix-react-sdk/src/components/structures/MessagePanel.tsx b/node_modules/matrix-react-sdk/src/components/structures/MessagePanel.tsx
index 3bfbe8e..cc95d21 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/MessagePanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/MessagePanel.tsx
@@ -235,7 +235,7 @@ export default class MessagePanel extends React.Component<IProps, IState> {
     // This is recomputed on each render. It's only stored on the component
     // for ease of passing the data around since it's computed in one pass
     // over all events.
-    private readReceiptsByEvent: Record<string, IReadReceiptProps[]> = {};
+    private readReceiptsByEvent: Map<string, IReadReceiptProps[]> = new Map();
 
     // Track read receipts by user ID. For each user ID we've ever shown a
     // a read receipt for, we store an object:
@@ -254,7 +254,7 @@ export default class MessagePanel extends React.Component<IProps, IState> {
     // This is recomputed on each render, using the data from the previous
     // render as our fallback for any user IDs we can't match a receipt to a
     // displayed event in the current render cycle.
-    private readReceiptsByUserId: Record<string, IReadReceiptForUser> = {};
+    private readReceiptsByUserId: Map<string, IReadReceiptForUser> = new Map();
 
     private readonly _showHiddenEvents: boolean;
     private isMounted = false;
@@ -624,7 +624,7 @@ export default class MessagePanel extends React.Component<IProps, IState> {
         // Note: the EventTile might still render a "sent/sending receipt" independent of
         // this information. When not providing read receipt information, the tile is likely
         // to assume that sent receipts are to be shown more often.
-        this.readReceiptsByEvent = {};
+        this.readReceiptsByEvent = new Map();
         if (this.props.showReadReceipts) {
             this.readReceiptsByEvent = this.getReadReceiptsByShownEvent();
         }
@@ -727,7 +727,7 @@ export default class MessagePanel extends React.Component<IProps, IState> {
         const eventId = mxEv.getId();
         const highlight = eventId === this.props.highlightedEventId;
 
-        const readReceipts = this.readReceiptsByEvent[eventId];
+        const readReceipts = this.readReceiptsByEvent.get(eventId);
 
         let isLastSuccessful = false;
         const isSentState = (s: EventStatus): boolean => !s || s === EventStatus.SENT;
@@ -846,17 +846,11 @@ export default class MessagePanel extends React.Component<IProps, IState> {
     // Get an object that maps from event ID to a list of read receipts that
     // should be shown next to that event. If a hidden event has read receipts,
     // they are folded into the receipts of the last shown event.
-    private getReadReceiptsByShownEvent(): Record<string, IReadReceiptProps[]> {
-        const receiptsByEvent: Record<string, IReadReceiptProps[]> = {};
-        const receiptsByUserId: Record<
-            string,
-            {
-                lastShownEventId: string;
-                receipt: IReadReceiptProps;
-            }
-        > = {};
+    private getReadReceiptsByShownEvent(): Map<string, IReadReceiptProps[]> {
+        const receiptsByEvent: Map<string, IReadReceiptProps[]> = new Map();
+        const receiptsByUserId: Map<string, IReadReceiptForUser> = new Map();
 
-        let lastShownEventId;
+        let lastShownEventId: string;
         for (const event of this.props.events) {
             if (this.shouldShowEvent(event)) {
                 lastShownEventId = event.getId();
@@ -865,9 +859,9 @@ export default class MessagePanel extends React.Component<IProps, IState> {
                 continue;
             }
 
-            const existingReceipts = receiptsByEvent[lastShownEventId] || [];
+            const existingReceipts = receiptsByEvent.get(lastShownEventId) || [];
             const newReceipts = this.getReadReceiptsForEvent(event);
-            receiptsByEvent[lastShownEventId] = existingReceipts.concat(newReceipts);
+            receiptsByEvent.set(lastShownEventId, existingReceipts.concat(newReceipts));
 
             // Record these receipts along with their last shown event ID for
             // each associated user ID.
@@ -885,21 +879,21 @@ export default class MessagePanel extends React.Component<IProps, IState> {
         // someone which had one in the last. By looking through our previous
         // mapping of receipts by user ID, we can cover recover any receipts
         // that would have been lost by using the same event ID from last time.
-        for (const userId in this.readReceiptsByUserId) {
-            if (receiptsByUserId[userId]) {
+        for (const userId of this.readReceiptsByUserId.keys()) {
+            if (receiptsByUserId.get(userId)) {
                 continue;
             }
-            const { lastShownEventId, receipt } = this.readReceiptsByUserId[userId];
-            const existingReceipts = receiptsByEvent[lastShownEventId] || [];
-            receiptsByEvent[lastShownEventId] = existingReceipts.concat(receipt);
-            receiptsByUserId[userId] = { lastShownEventId, receipt };
+            const { lastShownEventId, receipt } = this.readReceiptsByUserId.get(userId);
+            const existingReceipts = receiptsByEvent.get(lastShownEventId) || [];
+            receiptsByEvent.set(lastShownEventId, existingReceipts.concat(receipt));
+            receiptsByUserId.set(userId, { lastShownEventId, receipt });
         }
         this.readReceiptsByUserId = receiptsByUserId;
 
         // After grouping receipts by shown events, do another pass to sort each
         // receipt list.
-        for (const eventId in receiptsByEvent) {
-            receiptsByEvent[eventId].sort((r1, r2) => {
+        for (const receipts of receiptsByEvent.values()) {
+            receipts.sort((r1, r2) => {
                 return r2.ts - r1.ts;
             });
         }
diff --git a/node_modules/matrix-react-sdk/src/components/views/dialogs/devtools/AccountData.tsx b/node_modules/matrix-react-sdk/src/components/views/dialogs/devtools/AccountData.tsx
index 23f952c..a5317b4 100644
--- a/node_modules/matrix-react-sdk/src/components/views/dialogs/devtools/AccountData.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/dialogs/devtools/AccountData.tsx
@@ -51,7 +51,7 @@ export const RoomAccountDataEventEditor: React.FC<IEditorProps> = ({ mxEvent, on
 };
 
 interface IProps extends IDevtoolsProps {
-    events: Record<string, MatrixEvent>;
+    events: Map<string, MatrixEvent>;
     Editor: React.FC<IEditorProps>;
     actionLabel: string;
 }
@@ -74,7 +74,7 @@ const BaseAccountDataExplorer: React.FC<IProps> = ({ events, Editor, actionLabel
     return (
         <BaseTool onBack={onBack} actionLabel={actionLabel} onAction={onAction}>
             <FilteredList query={query} onChange={setQuery}>
-                {Object.entries(events).map(([eventType, ev]) => {
+                {Array.from(events.entries()).map(([eventType, ev]) => {
                     const onClick = (): void => {
                         setEvent(ev);
                     };
diff --git a/node_modules/matrix-react-sdk/src/languageHandler.tsx b/node_modules/matrix-react-sdk/src/languageHandler.tsx
index ec37d32..d7e5b70 100644
--- a/node_modules/matrix-react-sdk/src/languageHandler.tsx
+++ b/node_modules/matrix-react-sdk/src/languageHandler.tsx
@@ -21,6 +21,7 @@ import counterpart from "counterpart";
 import React from "react";
 import { logger } from "matrix-js-sdk/src/logger";
 import { Optional } from "matrix-events-sdk";
+import { MapWithDefault, safeSet } from "matrix-js-sdk/src/utils";
 
 import SettingsStore from "./settings/SettingsStore";
 import PlatformPeg from "./PlatformPeg";
@@ -629,21 +630,16 @@ export class CustomTranslationOptions {
 function doRegisterTranslations(customTranslations: ICustomTranslations): void {
     // We convert the operator-friendly version into something counterpart can
     // consume.
-    const langs: {
-        // same structure, just flipped key order
-        [lang: string]: {
-            [str: string]: string;
-        };
-    } = {};
+    // Map: lang → Record: string → translation
+    const langs: MapWithDefault<string, Record<string, string>> = new MapWithDefault(() => ({}));
     for (const [str, translations] of Object.entries(customTranslations)) {
         for (const [lang, newStr] of Object.entries(translations)) {
-            if (!langs[lang]) langs[lang] = {};
-            langs[lang][str] = newStr;
+            safeSet(langs.getOrCreate(lang), str, newStr);
         }
     }
 
     // Finally, tell counterpart about our translations
-    for (const [lang, translations] of Object.entries(langs)) {
+    for (const [lang, translations] of langs) {
         counterpart.registerTranslations(lang, translations);
     }
 }
diff --git a/node_modules/matrix-react-sdk/src/modules/ModuleRunner.ts b/node_modules/matrix-react-sdk/src/modules/ModuleRunner.ts
index 2545d04..1a94eb1 100644
--- a/node_modules/matrix-react-sdk/src/modules/ModuleRunner.ts
+++ b/node_modules/matrix-react-sdk/src/modules/ModuleRunner.ts
@@ -14,11 +14,13 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
+import { safeSet } from "matrix-js-sdk/src/utils";
 import { TranslationStringsObject } from "@matrix-org/react-sdk-module-api/lib/types/translations";
 import { AnyLifecycle } from "@matrix-org/react-sdk-module-api/lib/lifecycles/types";
 
 import { AppModule } from "./AppModule";
 import { ModuleFactory } from "./ModuleFactory";
+
 import "./ModuleComponents";
 
 /**
@@ -53,9 +55,10 @@ export class ModuleRunner {
             if (!i18n) continue;
 
             for (const [lang, strings] of Object.entries(i18n)) {
-                if (!merged[lang]) merged[lang] = {};
+                safeSet(merged, lang, merged[lang] || {});
+
                 for (const [str, val] of Object.entries(strings)) {
-                    merged[lang][str] = val;
+                    safeSet(merged[lang], str, val);
                 }
             }
         }
diff --git a/node_modules/matrix-react-sdk/src/settings/handlers/RoomDeviceSettingsHandler.ts b/node_modules/matrix-react-sdk/src/settings/handlers/RoomDeviceSettingsHandler.ts
index 418ff62..555bdbc 100644
--- a/node_modules/matrix-react-sdk/src/settings/handlers/RoomDeviceSettingsHandler.ts
+++ b/node_modules/matrix-react-sdk/src/settings/handlers/RoomDeviceSettingsHandler.ts
@@ -15,6 +15,8 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
+import { safeSet } from "matrix-js-sdk/src/utils";
+
 import { SettingLevel } from "../SettingLevel";
 import { WatchManager } from "../WatchManager";
 import AbstractLocalStorageSettingsHandler from "./AbstractLocalStorageSettingsHandler";
@@ -48,7 +50,7 @@ export default class RoomDeviceSettingsHandler extends AbstractLocalStorageSetti
             let value = this.read("mx_local_settings");
             if (!value) value = {};
             if (!value["blacklistUnverifiedDevicesPerRoom"]) value["blacklistUnverifiedDevicesPerRoom"] = {};
-            value["blacklistUnverifiedDevicesPerRoom"][roomId] = newValue;
+            safeSet(value["blacklistUnverifiedDevicesPerRoom"], roomId, newValue);
             this.setObject("mx_local_settings", value);
             this.watchers.notifyUpdate(settingName, roomId, SettingLevel.ROOM_DEVICE, newValue);
             return Promise.resolve();
diff --git a/node_modules/matrix-react-sdk/src/stores/AutoRageshakeStore.ts b/node_modules/matrix-react-sdk/src/stores/AutoRageshakeStore.ts
index f5e7bfe..7d1246e 100644
--- a/node_modules/matrix-react-sdk/src/stores/AutoRageshakeStore.ts
+++ b/node_modules/matrix-react-sdk/src/stores/AutoRageshakeStore.ts
@@ -135,9 +135,10 @@ export default class AutoRageshakeStore extends AsyncStoreWithClient<IState> {
                 ...eventInfo,
                 recipient_rageshake: rageshakeURL,
             };
-            this.matrixClient.sendToDevice(AUTO_RS_REQUEST, {
-                [messageContent.user_id]: { [messageContent.device_id]: messageContent },
-            });
+            this.matrixClient.sendToDevice(
+                AUTO_RS_REQUEST,
+                new Map([["messageContent.user_id", new Map([[messageContent.device_id, messageContent]])]]),
+            );
         }
     }
 
diff --git a/node_modules/matrix-react-sdk/src/stores/widgets/StopGapWidgetDriver.ts b/node_modules/matrix-react-sdk/src/stores/widgets/StopGapWidgetDriver.ts
index 8e892a0..19f2cb6 100644
--- a/node_modules/matrix-react-sdk/src/stores/widgets/StopGapWidgetDriver.ts
+++ b/node_modules/matrix-react-sdk/src/stores/widgets/StopGapWidgetDriver.ts
@@ -275,7 +275,7 @@ export class StopGapWidgetDriver extends WidgetDriver {
                         if (deviceId === "*") {
                             // Send the message to all devices we have keys for
                             await client.encryptAndSendToDevices(
-                                Object.values(deviceInfoMap[userId]).map((deviceInfo) => ({
+                                Array.from(deviceInfoMap.get(userId).values()).map((deviceInfo) => ({
                                     userId,
                                     deviceInfo,
                                 })),
@@ -284,7 +284,7 @@ export class StopGapWidgetDriver extends WidgetDriver {
                         } else {
                             // Send the message to a specific device
                             await client.encryptAndSendToDevices(
-                                [{ userId, deviceInfo: deviceInfoMap[userId][deviceId] }],
+                                [{ userId, deviceInfo: deviceInfoMap.get(userId).get(deviceId) }],
                                 content,
                             );
                         }
diff --git a/node_modules/matrix-react-sdk/src/stores/widgets/WidgetLayoutStore.ts b/node_modules/matrix-react-sdk/src/stores/widgets/WidgetLayoutStore.ts
index 74a6d6c..6dba3e8 100644
--- a/node_modules/matrix-react-sdk/src/stores/widgets/WidgetLayoutStore.ts
+++ b/node_modules/matrix-react-sdk/src/stores/widgets/WidgetLayoutStore.ts
@@ -18,7 +18,7 @@ import { Room } from "matrix-js-sdk/src/models/room";
 import { MatrixEvent } from "matrix-js-sdk/src/models/event";
 import { RoomStateEvent } from "matrix-js-sdk/src/models/room-state";
 import { Optional } from "matrix-events-sdk";
-import { compare } from "matrix-js-sdk/src/utils";
+import { compare, MapWithDefault, recursiveMapToObject } from "matrix-js-sdk/src/utils";
 
 import SettingsStore from "../../settings/SettingsStore";
 import WidgetStore, { IApp } from "../WidgetStore";
@@ -92,19 +92,17 @@ export const MAX_PINNED = 3;
 const MIN_WIDGET_WIDTH_PCT = 10; // 10%
 const MIN_WIDGET_HEIGHT_PCT = 2; // 2%
 
+interface ContainerValue {
+    ordered: IApp[];
+    height?: number;
+    distributions?: number[];
+}
+
 export class WidgetLayoutStore extends ReadyWatchingStore {
     private static internalInstance: WidgetLayoutStore;
 
-    private byRoom: {
-        [roomId: string]: Partial<{
-            [container in Container]: {
-                ordered: IApp[];
-                height?: number | null;
-                distributions?: number[];
-            };
-        }>;
-    } = {};
-
+    // Map: room Id → container → ContainerValue
+    private byRoom: MapWithDefault<string, Map<Container, ContainerValue>> = new MapWithDefault(() => new Map());
     private pinnedRef: string;
     private layoutRef: string;
 
@@ -138,7 +136,7 @@ export class WidgetLayoutStore extends ReadyWatchingStore {
     }
 
     protected async onNotReady(): Promise<void> {
-        this.byRoom = {};
+        this.byRoom = new MapWithDefault(() => new Map());
 
         this.matrixClient?.off(RoomStateEvent.Events, this.updateRoomFromState);
         SettingsStore.unwatchSetting(this.pinnedRef);
@@ -147,7 +145,8 @@ export class WidgetLayoutStore extends ReadyWatchingStore {
     }
 
     private updateAllRooms = (): void => {
-        this.byRoom = {};
+        this.byRoom = new MapWithDefault(() => new Map());
+
         for (const room of this.matrixClient.getVisibleRooms()) {
             this.recalculateRoom(room);
         }
@@ -180,12 +179,13 @@ export class WidgetLayoutStore extends ReadyWatchingStore {
     public recalculateRoom(room: Room): void {
         const widgets = WidgetStore.instance.getApps(room.roomId);
         if (!widgets?.length) {
-            this.byRoom[room.roomId] = {};
+            this.byRoom.set(room.roomId, new Map());
             this.emitFor(room);
             return;
         }
 
-        const beforeChanges = JSON.stringify(this.byRoom[room.roomId]);
+        const roomContainers = this.byRoom.getOrCreate(room.roomId);
+        const beforeChanges = JSON.stringify(recursiveMapToObject(roomContainers));
 
         const layoutEv = room.currentState.getStateEvents(WIDGET_LAYOUT_EVENT_TYPE, "");
         const legacyPinned = SettingsStore.getValue("Widgets.pinned", room.roomId);
@@ -321,33 +321,35 @@ export class WidgetLayoutStore extends ReadyWatchingStore {
         }
 
         // Finally, fill in our cache and update
-        this.byRoom[room.roomId] = {};
+        const newRoomContainers = new Map();
+        this.byRoom.set(room.roomId, newRoomContainers);
         if (topWidgets.length) {
-            this.byRoom[room.roomId][Container.Top] = {
+            newRoomContainers.set(Container.Top, {
                 ordered: topWidgets,
                 distributions: widths,
                 height: maxHeight,
-            };
+            });
         }
         if (rightWidgets.length) {
-            this.byRoom[room.roomId][Container.Right] = {
+            newRoomContainers.set(Container.Right, {
                 ordered: rightWidgets,
-            };
+            });
         }
         if (centerWidgets.length) {
-            this.byRoom[room.roomId][Container.Center] = {
+            newRoomContainers.set(Container.Center, {
                 ordered: centerWidgets,
-            };
+            });
         }
 
-        const afterChanges = JSON.stringify(this.byRoom[room.roomId]);
+        const afterChanges = JSON.stringify(recursiveMapToObject(newRoomContainers));
+
         if (afterChanges !== beforeChanges) {
             this.emitFor(room);
         }
     }
 
     public getContainerWidgets(room: Optional<Room>, container: Container): IApp[] {
-        return this.byRoom[room?.roomId]?.[container]?.ordered || [];
+        return this.byRoom.get(room?.roomId)?.get(container)?.ordered || [];
     }
 
     public isInContainer(room: Optional<Room>, widget: IApp, container: Container): boolean {
@@ -367,7 +369,7 @@ export class WidgetLayoutStore extends ReadyWatchingStore {
 
     public getResizerDistributions(room: Room, container: Container): string[] {
         // yes, string.
-        let distributions = this.byRoom[room.roomId]?.[container]?.distributions;
+        let distributions = this.byRoom.get(room.roomId)?.get(container)?.distributions;
         if (!distributions || distributions.length < 2) return [];
 
         // The distributor actually expects to be fed N-1 sizes and expands the middle section
@@ -396,19 +398,19 @@ export class WidgetLayoutStore extends ReadyWatchingStore {
                 container: container,
                 width: numbers[i],
                 index: i,
-                height: this.byRoom[room.roomId]?.[container]?.height || MIN_WIDGET_HEIGHT_PCT,
+                height: this.byRoom.get(room.roomId)?.get(container)?.height || MIN_WIDGET_HEIGHT_PCT,
             };
         });
         this.updateUserLayout(room, localLayout);
     }
 
     public getContainerHeight(room: Room, container: Container): number | null {
-        return this.byRoom[room.roomId]?.[container]?.height ?? null; // let the default get returned if needed
+        return this.byRoom.get(room.roomId)?.get(container)?.height ?? null; // let the default get returned if needed
     }
 
     public setContainerHeight(room: Room, container: Container, height?: number): void {
         const widgets = this.getContainerWidgets(room, container);
-        const widths = this.byRoom[room.roomId]?.[container]?.distributions;
+        const widths = this.byRoom.get(room.roomId)?.get(container)?.distributions;
         const localLayout: Record<string, IStoredLayout> = {};
         widgets.forEach((w, i) => {
             localLayout[w.id] = {
@@ -430,8 +432,8 @@ export class WidgetLayoutStore extends ReadyWatchingStore {
         const newIdx = clamp(currentIdx + delta, 0, widgets.length);
         widgets.splice(newIdx, 0, widget);
 
-        const widths = this.byRoom[room.roomId]?.[container]?.distributions;
-        const height = this.byRoom[room.roomId]?.[container]?.height;
+        const widths = this.byRoom.get(room.roomId)?.get(container)?.distributions;
+        const height = this.byRoom.get(room.roomId)?.get(container)?.height;
         const localLayout: Record<string, IStoredLayout> = {};
         widgets.forEach((w, i) => {
             localLayout[w.id] = {
@@ -498,8 +500,8 @@ export class WidgetLayoutStore extends ReadyWatchingStore {
             if (container === Container.Top) {
                 const containerWidgets = this.getContainerWidgets(room, container);
                 const idx = containerWidgets.findIndex((w) => w.id === widget.id);
-                const widths = this.byRoom[room.roomId]?.[container]?.distributions;
-                const height = this.byRoom[room.roomId]?.[container]?.height;
+                const widths = this.byRoom.get(room.roomId)?.get(container)?.distributions;
+                const height = this.byRoom.get(room.roomId)?.get(container)?.height;
                 evContent.widgets[widget.id] = {
                     ...evContent.widgets[widget.id],
                     height: height ? Math.round(height) : undefined,
@@ -512,12 +514,12 @@ export class WidgetLayoutStore extends ReadyWatchingStore {
     }
 
     private getAllWidgets(room: Room): [IApp, Container][] {
-        const containers = this.byRoom[room.roomId];
+        const containers = this.byRoom.get(room.roomId);
         if (!containers) return [];
 
         const ret: [IApp, Container][] = [];
-        for (const container in containers) {
-            const widgets = containers[container as Container].ordered;
+        for (const [container, containerValue] of containers) {
+            const widgets = containerValue.ordered;
             for (const widget of widgets) {
                 ret.push([widget, container as Container]);
             }
@@ -531,12 +533,12 @@ export class WidgetLayoutStore extends ReadyWatchingStore {
         for (const [widget, container] of allWidgets) {
             const containerWidgets = this.getContainerWidgets(room, container);
             const idx = containerWidgets.findIndex((w) => w.id === widget.id);
-            const widths = this.byRoom[room.roomId]?.[container]?.distributions;
+            const widths = this.byRoom.get(room.roomId)?.get(container)?.distributions;
             if (!newLayout[widget.id]) {
                 newLayout[widget.id] = {
                     container: container,
                     index: idx,
-                    height: this.byRoom[room.roomId]?.[container]?.height,
+                    height: this.byRoom.get(room.roomId)?.get(container)?.height,
                     width: widths?.[idx],
                 };
             }
diff --git a/node_modules/matrix-react-sdk/src/utils/device/clientInformation.ts b/node_modules/matrix-react-sdk/src/utils/device/clientInformation.ts
index de247a5..e67f159 100644
--- a/node_modules/matrix-react-sdk/src/utils/device/clientInformation.ts
+++ b/node_modules/matrix-react-sdk/src/utils/device/clientInformation.ts
@@ -71,7 +71,7 @@ export const recordClientInformation = async (
  *                      client information for devices NOT in this list will be removed
  */
 export const pruneClientInformation = (validDeviceIds: string[], matrixClient: MatrixClient): void => {
-    Object.values(matrixClient.store.accountData).forEach((event) => {
+    Array.from(matrixClient.store.accountData.values()).forEach((event) => {
         if (!event.getType().startsWith(clientInformationEventPrefix)) {
             return;
         }
