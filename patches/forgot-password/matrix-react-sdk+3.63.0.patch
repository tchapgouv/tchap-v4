diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/ForgotPassword.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/ForgotPassword.tsx
index 208c291..75650af 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/ForgotPassword.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/ForgotPassword.tsx
@@ -43,6 +43,7 @@ import { VerifyEmailModal } from "./forgot-password/VerifyEmailModal";
 import Spinner from "../../views/elements/Spinner";
 import { formatSeconds } from "../../../DateUtils";
 import AutoDiscoveryUtils from "../../../utils/AutoDiscoveryUtils";
+import TchapUtils from "../../../../../../src/util/TchapUtils"; // :TCHAP:
 
 const emailCheckInterval = 2000;
 
@@ -62,7 +63,7 @@ enum Phase {
 }
 
 interface Props {
-    serverConfig: ValidatedServerConfig;
+    // :TCHAP: we get serverConfig when user enters email, so remove it from props - serverConfig: ValidatedServerConfig;
     onLoginClick: () => void;
     onComplete: () => void;
 }
@@ -107,14 +108,17 @@ export default class ForgotPassword extends React.Component<Props, State> {
             serverSupportsControlOfDevicesLogout: false,
             logoutDevices: false,
         };
-        this.reset = new PasswordReset(this.props.serverConfig.hsUrl, this.props.serverConfig.isUrl);
+        // :TCHAP: no known server yet, this.reset stays undefined - this.reset = new PasswordReset(this.props.serverConfig.hsUrl, this.props.serverConfig.isUrl);
     }
 
     public componentDidMount() {
+        /* :TCHAP: we don't know which server to use yet, nothing to check here.
         this.checkServerCapabilities(this.props.serverConfig);
+        end :TCHAP: */
     }
 
     public componentDidUpdate(prevProps: Readonly<Props>) {
+        /* :TCHAP: we ignore serverConfig passed in props. So no use checking the server here.
         if (
             prevProps.serverConfig.hsUrl !== this.props.serverConfig.hsUrl ||
             prevProps.serverConfig.isUrl !== this.props.serverConfig.isUrl
@@ -125,6 +129,7 @@ export default class ForgotPassword extends React.Component<Props, State> {
             // Do capabilities check on new URLs
             this.checkServerCapabilities(this.props.serverConfig);
         }
+        end :TCHAP: */
     }
 
     private async checkServerLiveliness(serverConfig: ValidatedServerConfig): Promise<void> {
@@ -159,9 +164,38 @@ export default class ForgotPassword extends React.Component<Props, State> {
         });
     }
 
+    // :TCHAP:
+    private useNewServerConfig =  async (serverConfig) => {
+        console.log('Using serverConfig corresponding to this email :', serverConfig);
+
+        this.reset = new PasswordReset(serverConfig.hsUrl, serverConfig.isUrl);
+        // Note : this.reset is not a react state variable. It doesn't seem necessary to make it one, it seems to work this way.
+        // Note : we do not shut down or close the previous this.reset object in any way. Existing sessions just stay there. There doesn't
+        // seem to be an API for revoking tokens.
+
+        // If the server is not available, this displays "Server unavailable, overloaded, or something else went wrong."
+        await this.checkServerLiveliness(serverConfig);
+        await this.checkServerCapabilities(serverConfig);
+    }
+    // end :TCHAP:
+
     private async onPhaseEmailInputSubmit() {
         this.phase = Phase.SendingEmail;
 
+        // :TCHAP: find the server corresponding to the email.
+        const serverResult = await TchapUtils.fetchHomeserverForEmail(this.state.email);
+        if (!serverResult) {
+            this.setState({
+                serverIsAlive: false,
+                errorText: _t('Server unavailable, overloaded, or something else went wrong.'), // reuse existing string
+                phase: Phase.EnterEmail, // return to original phase, to remove the loding spinner from the submit button.
+            });
+            return;
+        }
+        const serverConfig = TchapUtils.makeValidatedServerConfig(serverResult);
+        await this.useNewServerConfig(serverConfig);
+        // end :TCHAP:
+
         if (await this.sendVerificationMail()) {
             this.phase = Phase.EmailSent;
             return;
@@ -323,8 +357,10 @@ export default class ForgotPassword extends React.Component<Props, State> {
             errorText: "",
         });
 
+        /* :TCHAP: at this point we may not know the serverConfig to use yet. So don't check.
         // Refresh the server errors. Just in case the server came back online of went offline.
         await this.checkServerLiveliness(this.props.serverConfig);
+        end :TCHAP: */
 
         // Server error
         if (!this.state.serverIsAlive) return;
@@ -355,7 +391,7 @@ export default class ForgotPassword extends React.Component<Props, State> {
             <EnterEmail
                 email={this.state.email}
                 errorText={this.state.errorText}
-                homeserver={this.props.serverConfig.hsName}
+                homeserver={ null /* :TCHAP: - no known homeserver yet - this.props.serverConfig.hsName */}
                 loading={this.state.phase === Phase.SendingEmail}
                 onInputChanged={this.onInputChanged}
                 onLoginClick={this.props.onLoginClick!} // set by default props
@@ -446,7 +482,9 @@ export default class ForgotPassword extends React.Component<Props, State> {
                                     onChange={() => this.setState({ logoutDevices: !this.state.logoutDevices })}
                                     checked={this.state.logoutDevices}
                                 >
-                                    {_t("Sign out of all devices")}
+                                    { /* :TCHAP: _t("Sign out of all devices") */
+                                        _t('Lock my messages and disconnect me from all my devices (in case your account is hacked or a device loss)')
+                                    /*end :TCHAP: */ }
                                 </StyledCheckbox>
                             </div>
                         ) : null}
diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/forgot-password/EnterEmail.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/forgot-password/EnterEmail.tsx
index d5f8d84..2bda4d8 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/forgot-password/EnterEmail.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/forgot-password/EnterEmail.tsx
@@ -64,6 +64,7 @@ export const EnterEmail: React.FC<EnterEmailProps> = ({
         <>
             <EmailIcon className="mx_AuthBody_icon" />
             <h1>{_t("Enter your email to reset password")}</h1>
+            { /* :TCHAP: we don't display homeservers to users
             <p className="mx_AuthBody_text">
                 {_t(
                     "<b>%(homeserver)s</b> will send you a verification link to let you reset your password.",
@@ -71,6 +72,7 @@ export const EnterEmail: React.FC<EnterEmailProps> = ({
                     { b: (t) => <b>{t}</b> },
                 )}
             </p>
+                end :TCHAP: */ }
             <form onSubmit={onSubmit}>
                 <fieldset disabled={loading}>
                     <div className="mx_AuthBody_fieldRow">
