diff --git a/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss b/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
index c23f53b..0e206d7 100644
--- a/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
+++ b/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
@@ -16,7 +16,10 @@ limitations under the License.
 */
 
 .mx_CompleteSecurityBody {
+    /* :TCHAP: remove
     width: 600px;
+    end :TCHAP: */
+    width: 660px;
     color: $authpage-primary-color;
     background-color: $background;
     border-radius: 4px;
diff --git a/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx b/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
index cf0c160..861ff87 100644
--- a/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
+++ b/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
@@ -57,7 +57,7 @@ enum Phase {
     Migrate = "migrate",
     Passphrase = "passphrase",
     PassphraseConfirm = "passphrase_confirm",
-    ShowKey = "show_key",
+    ShowKey = "show_key", //:tchap: we use this screen
     Storing = "storing",
     ConfirmSkip = "confirm_skip",
 }
@@ -177,13 +177,38 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                 MatrixClientPeg.get().isCryptoEnabled() && (await MatrixClientPeg.get().isKeyBackupTrusted(backupInfo));
 
             const { forceReset } = this.props;
-            const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ChooseKeyPassphrase;
+            //const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ChooseKeyPassphrase;
+            const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ShowKey;//:tchap: goes directly to showkey
 
+            /* :TCHAP: remove
             this.setState({
                 phase,
                 backupInfo,
                 backupSigStatus,
             });
+            end :TCHAP: */
+
+            // add :TCHAP:
+            if (phase === Phase.ShowKey) {
+                this.recoveryKey = await MatrixClientPeg.get().createRecoveryKeyFromPassphrase();
+                this.setState({
+                    phase,
+                    backupInfo,
+                    backupSigStatus,
+                    passPhraseKeySelected:SecureBackupSetupMethod.Key,
+                    copied: false,
+                    downloaded: false,
+                    setPassphrase: false 
+                });
+            } else {
+                //if phase is Phase.Migrate
+                this.setState({
+                    phase,
+                    backupInfo,
+                    backupSigStatus,
+                });
+            }
+            // end :TCHAP:
 
             return {
                 backupInfo,
@@ -717,7 +742,10 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
         if (this.state.phase === Phase.ShowKey) {
             continueButton = (
                 <DialogButtons
-                    primaryButton={_t("Continue")}
+                    // :tchap: change label
+                    // primaryButton={_t("Continue")}
+                    // end :tchap:
+                    primaryButton={_t("Activate")}
                     disabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}
                     onPrimaryButtonClick={this.onShowKeyContinueClick}
                     hasCancel={false}
@@ -733,18 +761,27 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
 
         return (
             <div>
+                {/* tchap: add this <p /> */}
+                <p>
+                    {_t(
+                        "This is your recovery key"
+                    )}
+                </p>
+                {/* end tchap */}
                 <p>
                     {_t(
                         "Store your Security Key somewhere safe, like a password manager or a safe, " +
                             "as it's used to safeguard your encrypted data.",
                     )}
                 </p>
+
                 <div className="mx_CreateSecretStorageDialog_primaryContainer mx_CreateSecretStorageDialog_recoveryKeyPrimarycontainer">
                     <div className="mx_CreateSecretStorageDialog_recoveryKeyContainer">
                         <div className="mx_CreateSecretStorageDialog_recoveryKey">
                             <code ref={this.recoveryKeyNode}>{this.recoveryKey.encodedPrivateKey}</code>
                         </div>
                         <div className="mx_CreateSecretStorageDialog_recoveryKeyButtons">
+                            {/* :TCHAP: remove
                             <AccessibleButton
                                 kind="primary"
                                 className="mx_Dialog_primary"
@@ -759,6 +796,7 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                                     copyButton: "",
                                 })}
                             </span>
+                            end :TCHAP: */}
                             <AccessibleButton
                                 kind="primary"
                                 className="mx_Dialog_primary mx_CreateSecretStorageDialog_recoveryKeyButtons_copyBtn"
diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
index 8da8e5c..b261324 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
@@ -92,9 +92,13 @@ export default class CompleteSecurity extends React.Component<IProps, IState> {
 
         let skipButton;
         if (phase === Phase.Intro || phase === Phase.ConfirmReset) {
+            // :Tchap: Condition to skip Phase.ConfirmSkip and its "Are you sure" modal after login for csss
+            const tchapOnSkipClick = phase === Phase.Intro ? this.props.onFinished : this.onSkipClick;
+            // end :Tchap:
+
             skipButton = (
                 <AccessibleButton
-                    onClick={this.onSkipClick}
+                    onClick={tchapOnSkipClick}
                     className="mx_CompleteSecurity_skip"
                     aria-label={_t("Skip verification for now")}
                 />
diff --git a/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts b/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
index 5dc32de..868cd7b 100644
--- a/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
+++ b/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
@@ -50,7 +50,8 @@ const getIcon = (kind: Kind) => {
 const getSetupCaption = (kind: Kind) => {
     switch (kind) {
         case Kind.SET_UP_ENCRYPTION:
-            return _t("Continue");
+            //:tchap: return _t("Continue");
+            return _t("Activate");
         case Kind.UPGRADE_ENCRYPTION:
             return _t("Upgrade");
         case Kind.VERIFY_THIS_SESSION:
