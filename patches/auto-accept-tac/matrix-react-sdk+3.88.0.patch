diff --git a/node_modules/matrix-react-sdk/src/IdentityAuthClient.tsx b/node_modules/matrix-react-sdk/src/IdentityAuthClient.tsx
index e4bbb76..efdbb25 100644
--- a/node_modules/matrix-react-sdk/src/IdentityAuthClient.tsx
+++ b/node_modules/matrix-react-sdk/src/IdentityAuthClient.tsx
@@ -29,6 +29,7 @@ import {
 } from "./utils/IdentityServerUtils";
 import QuestionDialog from "./components/views/dialogs/QuestionDialog";
 import { abbreviateUrl } from "./utils/UrlUtils";
+import TchapUIFeature from "../../../src/tchap/util/TchapUIFeature";
 
 export class AbortedIdentityActionError extends Error {}
 
@@ -130,6 +131,18 @@ export default class IdentityAuthClient {
             throw e;
         }
 
+        // :TCHAP: no need confirmation of Terms and Conditions to set a default identity server as we trust our backend servers 
+        if (TchapUIFeature.autoAcceptTermsAndConditions){
+            if (
+                !this.tempClient &&
+                !doesAccountDataHaveIdentityServer(this.matrixClient) 
+            ) {
+                setToDefaultIdentityServer(this.matrixClient);
+            }
+            return;
+        }
+        // end :TCHAP:
+
         if (
             !this.tempClient &&
             !doesAccountDataHaveIdentityServer(this.matrixClient) &&
diff --git a/node_modules/matrix-react-sdk/src/Terms.ts b/node_modules/matrix-react-sdk/src/Terms.ts
index 41400ef..f703430 100644
--- a/node_modules/matrix-react-sdk/src/Terms.ts
+++ b/node_modules/matrix-react-sdk/src/Terms.ts
@@ -20,6 +20,11 @@ import { logger } from "matrix-js-sdk/src/logger";
 
 import Modal from "./Modal";
 import TermsDialog from "./components/views/dialogs/TermsDialog";
+import {
+    doesAccountDataHaveIdentityServer,
+    setToDefaultIdentityServer,
+} from './utils/IdentityServerUtils';
+import TchapUIFeature from "../../../src/tchap/util/TchapUIFeature";
 
 export class TermsNotSignedError extends Error {}
 
@@ -79,6 +84,15 @@ export async function startTermsFlow(
     services: Service[],
     interactionCallback: TermsInteractionCallback = dialogTermsInteractionCallback,
 ): Promise<void> {
+    // :TCHAP: no need to go through Terms flow as we trust our backend servers
+    if (TchapUIFeature.autoAcceptTermsAndConditions){
+        if (!doesAccountDataHaveIdentityServer(client)) {
+            setToDefaultIdentityServer(client);
+        }
+        return;
+    }
+    // end :TCHAP:
+
     const termsPromises = services.map((s) => client.getTerms(s.serviceType, s.baseUrl));
 
     /*
