diff --git a/node_modules/matrix-react-sdk/src/components/views/dialogs/BugReportDialog.tsx b/node_modules/matrix-react-sdk/src/components/views/dialogs/BugReportDialog.tsx
index 5d826f2..c7df84a 100644
--- a/node_modules/matrix-react-sdk/src/components/views/dialogs/BugReportDialog.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/dialogs/BugReportDialog.tsx
@@ -32,6 +32,7 @@ import DialogButtons from "../elements/DialogButtons";
 import { sendSentryReport } from "../../../sentry";
 import defaultDispatcher from "../../../dispatcher/dispatcher";
 import { Action } from "../../../dispatcher/actions";
+import TchapUtils from "../../../../../../src/tchap/util/TchapUtils"; // :TCHAP:
 
 interface IProps {
     onFinished: (success: boolean) => void;
@@ -96,12 +97,21 @@ export default class BugReportDialog extends React.Component<IProps, IState> {
     };
 
     private onSubmit = (): void => {
+        /* :TCHAP: do not ask for a github issue
         if ((!this.state.text || !this.state.text.trim()) && (!this.state.issueUrl || !this.state.issueUrl.trim())) {
             this.setState({
                 err: _t("bug_reporting|error_empty"),
             });
             return;
         }
+        */
+        if ((!this.state.text || !this.state.text.trim())) {
+            this.setState({
+                err: _t("Please tell us what went wrong in the \"Notes\" field."),
+            });
+            return;
+        }
+        // end :TCHAP:
 
         const userText =
             (this.state.text.length > 0 ? this.state.text + "\n\n" : "") +
@@ -111,11 +121,27 @@ export default class BugReportDialog extends React.Component<IProps, IState> {
         this.setState({ busy: true, progress: null, err: null });
         this.sendProgressCallback(_t("bug_reporting|preparing_logs"));
 
-        sendBugReport(SdkConfig.get().bug_report_endpoint_url, {
-            userText,
-            sendLogs: true,
-            progressCallback: this.sendProgressCallback,
-            labels: this.props.label ? [this.props.label] : [],
+        // :TCHAP: add custom fields if it's a voip report
+        Promise.resolve().then(() => {
+            if (this.props.label !== "voip-feedback") {
+                return Promise.resolve({});
+            }
+
+            const customFields: Record<string, string> = {};
+            customFields.context = "voip";
+            return TchapUtils.isCurrentlyUsingBluetooth().then(isCurrentlyUsingBluetooth => {
+                customFields.audio_input = isCurrentlyUsingBluetooth ? "headset_bluetooth" : "device";
+                return customFields;
+            });
+        }).then(customFields => {
+            return sendBugReport(SdkConfig.get().bug_report_endpoint_url, {
+                userText,
+                sendLogs: true,
+                progressCallback: this.sendProgressCallback,
+                labels: this.props.label ? [this.props.label] : [],
+                customFields: customFields,
+            });
+            // end :TCHAP:
         }).then(
             () => {
                 if (!this.unmounted) {
@@ -214,6 +240,55 @@ export default class BugReportDialog extends React.Component<IProps, IState> {
             );
         }
 
+        { /** :TCHAP: replace with our own dialog */}
+        return (
+            <BaseDialog
+            className="mx_BugReportDialog"
+            onFinished={this.onCancel}
+            title={_t('Submit debug logs to Tchap support team')}
+            contentId="mx_Dialog_content"
+        >
+            <div className="mx_Dialog_content" id="mx_Dialog_content">
+                {warning}
+                <p>{_t("bug_reporting|description")}</p>
+                <Field
+                    className="mx_BugReportDialog_field_input"
+                    element="textarea"
+                    label={_t("bug_reporting|textarea_label")}
+                    rows={5}
+                    onChange={this.onTextChange}
+                    value={this.state.text}
+                    placeholder={_t("bug_reporting|additional_context")}
+                />
+                {progress}
+                {error}
+                <div className="mx_BugReportDialog_send_logs">
+                    <DialogButtons
+                        primaryButton={_t("bug_reporting|send_logs")}
+                        onPrimaryButtonClick={this.onSubmit}
+                        focus={true}
+                        hasCancel={false}
+                        disabled={this.state.busy}
+                    />
+                </div>
+
+                <div className="mx_BugReportDialog_download">
+                    <p>
+                        { _t("Just want to get your own logs, without sharing them with the Tchap team?") }
+                    </p>
+                    <DialogButtons
+                        primaryButton={_t("bug_reporting|download_logs")}
+                        onPrimaryButtonClick={this.onDownload}
+                        focus={true}
+                        hasCancel={false}
+                        disabled={this.state.downloadBusy}
+                    />
+                    {this.state.downloadProgress && <span>{this.state.downloadProgress} ...</span>}
+                </div>
+            </div>
+        </BaseDialog>
+        );
+        {/*
         return (
             <BaseDialog
                 className="mx_BugReportDialog"
@@ -281,5 +356,6 @@ export default class BugReportDialog extends React.Component<IProps, IState> {
                 />
             </BaseDialog>
         );
+        end :TCHAP: */}
     }
 }
diff --git a/node_modules/matrix-react-sdk/src/components/views/elements/AccessibleButton.tsx b/node_modules/matrix-react-sdk/src/components/views/elements/AccessibleButton.tsx
index 1eb0379..90955dd 100644
--- a/node_modules/matrix-react-sdk/src/components/views/elements/AccessibleButton.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/elements/AccessibleButton.tsx
@@ -85,7 +85,7 @@ type Props<T extends keyof JSX.IntrinsicElements> = DynamicHtmlElementProps<T> &
     /**
      * Event handler for button activation. Should be implemented exactly like a normal `onClick` handler.
      */
-    onClick: ((e: ButtonEvent) => void | Promise<void>) | null;
+    onClick?: ((e: ButtonEvent) => void | Promise<void>) | null;
 };
 
 /**
diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/LegacyCallEvent.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/LegacyCallEvent.tsx
index 3c8241d..cdd9a83 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/LegacyCallEvent.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/LegacyCallEvent.tsx
@@ -28,6 +28,10 @@ import AccessibleTooltipButton from "../elements/AccessibleTooltipButton";
 import { formatPreciseDuration } from "../../../DateUtils";
 import Clock from "../audio_messages/Clock";
 
+import Modal from "matrix-react-sdk/src/Modal"; // :TCHAP:
+import BugReportDialog from "matrix-react-sdk/src/components/views/dialogs/BugReportDialog"; // :TCHAP:
+import "../../../../../../res/css/views/messages/TchapLegacyCallEvent.pcss"; // :TCHAP:
+
 const MAX_NON_NARROW_WIDTH = (450 / 70) * 100;
 
 interface IProps {
@@ -192,6 +196,7 @@ export default class LegacyCallEvent extends React.PureComponent<IProps, IState>
                 return (
                     <div className="mx_LegacyCallEvent_content">
                         {text}
+                        {this.renderBugReportButton()}
                         {this.props.timestamp}
                     </div>
                 );
@@ -264,6 +269,25 @@ export default class LegacyCallEvent extends React.PureComponent<IProps, IState>
         );
     }
 
+    private onReportBugClick = (): void => {
+        Modal.createDialog(BugReportDialog, {
+            initialText: _t("tchap_voip_bug_report_prefill"),
+            label: "voip-feedback",
+        });
+    };
+
+    private renderBugReportButton(): JSX.Element {
+        return (
+            <AccessibleButton
+                className="mx_LegacyCallEvent_content_button mx_LegacyCallEvent_content_button_reportBug"
+                onClick={this.onReportBugClick}
+                kind="primary"
+            >
+                <span> {_t("Report a problem")} </span>
+            </AccessibleButton>
+        );
+    }
+
     public render(): React.ReactNode {
         const event = this.props.mxEvent;
         const sender = event.sender ? event.sender.name : event.getSender();
diff --git a/node_modules/matrix-react-sdk/src/rageshake/submit-rageshake.ts b/node_modules/matrix-react-sdk/src/rageshake/submit-rageshake.ts
index 5f2a399..70d30df 100644
--- a/node_modules/matrix-react-sdk/src/rageshake/submit-rageshake.ts
+++ b/node_modules/matrix-react-sdk/src/rageshake/submit-rageshake.ts
@@ -102,7 +102,11 @@ async function collectBaseInformation(body: FormData, opts: IOpts): Promise<void
     const touchInput = matchesMediaQuery("(pointer: coarse)");
 
     body.append("text", opts.userText || "User did not supply any additional text.");
+    /* :TCHAP: rename app - for bugreport rageshakes
     body.append("app", opts.customApp || "element-web");
+    */
+    body.append("app", opts.customApp || "tchap-web");
+    // end :TCHAP:
     body.append("version", version ?? "UNKNOWN");
     body.append("user_agent", userAgent);
     body.append("installed_pwa", installedPWA);
@@ -129,6 +133,10 @@ async function collectClientInfo(client: MatrixClient, body: FormData): Promise<
         await collectRecoveryInfo(client, cryptoApi, body);
     }
 
+    // :TCHAP: add user email - for bugreport rageshakes
+    await collectUserEmail(client, body);
+    // end :TCHAP:
+
     await collectSynapseSpecific(client, body);
 }
 
@@ -316,6 +324,16 @@ async function collectLogs(
         body.append("compressed-log", new Blob([buf]), entry.id);
     }
 }
+
+// :TCHAP:
+async function collectUserEmail(client: MatrixClient, body: FormData): Promise<void> {
+    const result = await client.getThreePids(); //it generates a API calls which is acceptable because feedbacks submit are not so frequent (unfortunately)
+    result.threepids.forEach(threepid => {
+        body.append(threepid.medium, threepid.address);
+    });
+}
+// end :TCHAP:
+
 /**
  * Send a bug report.
  *
@@ -417,7 +435,15 @@ export async function submitFeedback(
     body.append("text", comment);
     body.append("can_contact", canContact ? "yes" : "no");
 
+    /* :TCHAP: rename app and add email - for feedback rageshakes
     body.append("app", "element-web");
+    */
+    body.append("app", "tchap-web");
+    const client = MatrixClientPeg.get();
+    if(client) {
+        await collectUserEmail(client, body);
+    }
+    // end :TCHAP:
     body.append("version", version || "UNKNOWN");
     body.append("platform", PlatformPeg.get()?.getHumanReadableName() ?? "n/a");
     body.append("user_id", MatrixClientPeg.get()?.getUserId() ?? "n/a");
