diff --git a/node_modules/matrix-react-sdk/src/components/views/context_menus/MessageContextMenu.tsx b/node_modules/matrix-react-sdk/src/components/views/context_menus/MessageContextMenu.tsx
index e0fca0a..c836aea 100644
--- a/node_modules/matrix-react-sdk/src/components/views/context_menus/MessageContextMenu.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/context_menus/MessageContextMenu.tsx
@@ -60,6 +60,8 @@ import { getForwardableEvent } from "../../../events/forward/getForwardableEvent
 import { getShareableLocationEvent } from "../../../events/location/getShareableLocationEvent";
 import { ShowThreadPayload } from "../../../dispatcher/payloads/ShowThreadPayload";
 import { CardContext } from "../right_panel/context";
+//:tchap: add feature flags
+import TchapUIFeature from "../../../../../../src/tchap/util/TchapUIFeature";
 
 interface IReplyInThreadButton {
     mxEvent: MatrixEvent;
@@ -676,7 +678,10 @@ export default class MessageContextMenu extends React.Component<IProps, IState>
                 <IconizedContextMenuOptionList>
                     {reactButton}
                     {replyButton}
-                    {replyInThreadButton}
+                    {/* :TCHAP: activate Thread based on homeserver feature flag
+                    {replyInThreadButton} */}
+                    {TchapUIFeature.isFeatureActiveForHomeserver("feature_thread") ? replyInThreadButton : null}
+                    {/*:TCHAP: end */}
                     {editButton}
                 </IconizedContextMenuOptionList>
             );
diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/MessageActionBar.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/MessageActionBar.tsx
index 9cf3592..066deae 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/MessageActionBar.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/MessageActionBar.tsx
@@ -61,6 +61,7 @@ import { ShowThreadPayload } from "../../../dispatcher/payloads/ShowThreadPayloa
 import { GetRelationsForEvent, IEventTileType } from "../rooms/EventTile";
 import { VoiceBroadcastInfoEventType } from "../../../voice-broadcast/types";
 import { ButtonEvent } from "../elements/AccessibleButton";
+import TchapUIFeature from "../../../../../../src/tchap/util/TchapUIFeature";
 
 interface IOptionsButtonProps {
     mxEvent: MatrixEvent;
@@ -345,7 +346,10 @@ export default class MessageActionBar extends React.PureComponent<IMessageAction
             !M_BEACON_INFO.matches(this.props.mxEvent.getType()) &&
             !(this.props.mxEvent.getType() === VoiceBroadcastInfoEventType);
 
-        return inNotThreadTimeline && isAllowedMessageType;
+        //:TCHAP: activate Thread based on homeserver feature flag
+        //return inNotThreadTimeline && isAllowedMessageType;
+        return TchapUIFeature.isFeatureActiveForHomeserver("feature_thread") && inNotThreadTimeline && isAllowedMessageType;
+        //:TCHAP: end
     }
 
     /**
diff --git a/node_modules/matrix-react-sdk/src/components/views/right_panel/LegacyRoomHeaderButtons.tsx b/node_modules/matrix-react-sdk/src/components/views/right_panel/LegacyRoomHeaderButtons.tsx
index 672a288..285ec19 100644
--- a/node_modules/matrix-react-sdk/src/components/views/right_panel/LegacyRoomHeaderButtons.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/right_panel/LegacyRoomHeaderButtons.tsx
@@ -40,6 +40,7 @@ import { SummarizedNotificationState } from "../../../stores/notifications/Summa
 import PosthogTrackers from "../../../PosthogTrackers";
 import { ButtonEvent } from "../elements/AccessibleButton";
 import { doesRoomOrThreadHaveUnreadMessages } from "../../../Unread";
+import TchapUIFeature from "../../../../../../src/tchap/util/TchapUIFeature";
 
 const ROOM_INFO_PHASES = [
     RightPanelPhases.RoomSummary,
@@ -273,6 +274,8 @@ export default class LegacyRoomHeaderButtons extends HeaderButtons<IProps> {
                 onClick={this.onTimelineCardClicked}
             />,
         );
+        //:tchap: activate Thread based on homeserver feature flag
+        if(TchapUIFeature.isFeatureActiveForHomeserver("feature_thread")){
         rightPanelPhaseButtons.set(
             RightPanelPhases.ThreadPanel,
             <HeaderButton
@@ -287,6 +290,8 @@ export default class LegacyRoomHeaderButtons extends HeaderButtons<IProps> {
                 <UnreadIndicator color={this.state.threadNotificationLevel} />
             </HeaderButton>,
         );
+        } //close bracket :tchap: end
+
         if (this.state.notificationsEnabled) {
             rightPanelPhaseButtons.set(
                 RightPanelPhases.NotificationPanel,
